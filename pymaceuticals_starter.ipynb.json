{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "      <th>Drug</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>b128</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>Capomulin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>b128</td>\n",
       "      <td>5</td>\n",
       "      <td>45.651331</td>\n",
       "      <td>0</td>\n",
       "      <td>Capomulin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>b128</td>\n",
       "      <td>10</td>\n",
       "      <td>43.270852</td>\n",
       "      <td>0</td>\n",
       "      <td>Capomulin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>b128</td>\n",
       "      <td>15</td>\n",
       "      <td>43.784893</td>\n",
       "      <td>0</td>\n",
       "      <td>Capomulin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>b128</td>\n",
       "      <td>20</td>\n",
       "      <td>42.731552</td>\n",
       "      <td>0</td>\n",
       "      <td>Capomulin</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Mouse ID  Timepoint  Tumor Volume (mm3)  Metastatic Sites       Drug\n",
       "0     b128          0           45.000000                 0  Capomulin\n",
       "1     b128          5           45.651331                 0  Capomulin\n",
       "2     b128         10           43.270852                 0  Capomulin\n",
       "3     b128         15           43.784893                 0  Capomulin\n",
       "4     b128         20           42.731552                 0  Capomulin"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dependencies and Setup\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "import csv\n",
    "\n",
    "# Hide warning messages in notebook\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# File to Load\n",
    "path = os.path.join(\"data\", \"mouse_drug_data.csv\")\n",
    "mouse_drug_data = pd.read_csv(path)\n",
    "\n",
    "path2 = os.path.join(\"data\", \"clinicaltrial_data.csv\")\n",
    "clinicaltrial_data = pd.read_csv(path2)\n",
    "\n",
    "# Combine the data into a single dataset\n",
    "combined = pd.merge(clinicaltrial_data, mouse_drug_data,\n",
    "                    on =\"Mouse ID\",how='outer')\n",
    "\n",
    "# Display the data table for preview\n",
    "combined.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tumor Response to Treatment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>5</td>\n",
       "      <td>44.266086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>10</td>\n",
       "      <td>43.084291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>15</td>\n",
       "      <td>42.064317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>20</td>\n",
       "      <td>40.716325</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Drug  Timepoint  Tumor Volume (mm3)\n",
       "0  Capomulin          0           45.000000\n",
       "1  Capomulin          5           44.266086\n",
       "2  Capomulin         10           43.084291\n",
       "3  Capomulin         15           42.064317\n",
       "4  Capomulin         20           40.716325"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Store the Mean Tumor Volume Data Grouped by Drug and Timepoint \n",
    "average_tumor_vol = combined.groupby([\"Drug\",\"Timepoint\"])[\"Tumor Volume (mm3)\"].mean().reset_index()\n",
    "\n",
    "# Convert to DataFrame\n",
    "tumor_response = pd.DataFrame(average_tumor_vol)\n",
    "\n",
    "# Preview DataFrame\n",
    "tumor_response.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td rowspan=\"5\" valign=\"top\">Capomulin</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>0.448593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>0.702684</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>0.838617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>0.909731</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     Tumor Volume (mm3)\n",
       "Drug      Timepoint                    \n",
       "Capomulin 0                    0.000000\n",
       "          5                    0.448593\n",
       "          10                   0.702684\n",
       "          15                   0.838617\n",
       "          20                   0.909731"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Store the Standard Error of Tumor Volumes Grouped by Drug and Timepoint\n",
    "standard_error_tumorvol = combined.groupby([\"Drug\",\"Timepoint\"])[\"Tumor Volume (mm3)\"].sem().reset_index()\n",
    "# Convert to DataFrame\n",
    "standard_error_tumorvol_df = pd.DataFrame(stderror_tumorvol)\n",
    "# Preview DataFrame\n",
    "standard_error_tumorvol_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Drug</th>\n",
       "      <th>Capomulin</th>\n",
       "      <th>Ceftamin</th>\n",
       "      <th>Infubinol</th>\n",
       "      <th>Ketapril</th>\n",
       "      <th>Naftisol</th>\n",
       "      <th>Placebo</th>\n",
       "      <th>Propriva</th>\n",
       "      <th>Ramicane</th>\n",
       "      <th>Stelasyn</th>\n",
       "      <th>Zoniferol</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Timepoint</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>44.266086</td>\n",
       "      <td>46.503051</td>\n",
       "      <td>47.062001</td>\n",
       "      <td>47.389175</td>\n",
       "      <td>46.796098</td>\n",
       "      <td>47.125589</td>\n",
       "      <td>47.248967</td>\n",
       "      <td>43.944859</td>\n",
       "      <td>47.527452</td>\n",
       "      <td>46.851818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>43.084291</td>\n",
       "      <td>48.285125</td>\n",
       "      <td>49.403909</td>\n",
       "      <td>49.582269</td>\n",
       "      <td>48.694210</td>\n",
       "      <td>49.423329</td>\n",
       "      <td>49.101541</td>\n",
       "      <td>42.531957</td>\n",
       "      <td>49.463844</td>\n",
       "      <td>48.689881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>42.064317</td>\n",
       "      <td>50.094055</td>\n",
       "      <td>51.296397</td>\n",
       "      <td>52.399974</td>\n",
       "      <td>50.933018</td>\n",
       "      <td>51.359742</td>\n",
       "      <td>51.067318</td>\n",
       "      <td>41.495061</td>\n",
       "      <td>51.529409</td>\n",
       "      <td>50.779059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>40.716325</td>\n",
       "      <td>52.157049</td>\n",
       "      <td>53.197691</td>\n",
       "      <td>54.920935</td>\n",
       "      <td>53.644087</td>\n",
       "      <td>54.364417</td>\n",
       "      <td>53.346737</td>\n",
       "      <td>40.238325</td>\n",
       "      <td>54.067395</td>\n",
       "      <td>53.170334</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Drug       Capomulin   Ceftamin  Infubinol   Ketapril   Naftisol    Placebo  \\\n",
       "Timepoint                                                                     \n",
       "0          45.000000  45.000000  45.000000  45.000000  45.000000  45.000000   \n",
       "5          44.266086  46.503051  47.062001  47.389175  46.796098  47.125589   \n",
       "10         43.084291  48.285125  49.403909  49.582269  48.694210  49.423329   \n",
       "15         42.064317  50.094055  51.296397  52.399974  50.933018  51.359742   \n",
       "20         40.716325  52.157049  53.197691  54.920935  53.644087  54.364417   \n",
       "\n",
       "Drug        Propriva   Ramicane   Stelasyn  Zoniferol  \n",
       "Timepoint                                              \n",
       "0          45.000000  45.000000  45.000000  45.000000  \n",
       "5          47.248967  43.944859  47.527452  46.851818  \n",
       "10         49.101541  42.531957  49.463844  48.689881  \n",
       "15         51.067318  41.495061  51.529409  50.779059  \n",
       "20         53.346737  40.238325  54.067395  53.170334  "
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Minor Data Munging to Re-Format the Data Frames\n",
    "cleaned_tumor_response=tumor_response.pivot(index=\"Timepoint\", columns=\"Drug\", values='Tumor Volume (mm3)')\n",
    "# Preview that Reformatting worked\n",
    "cleaned_tumor_response.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate the Plot (with Error Bars)\n",
    "drug = [['Capomulin', 'Ceftamin', 'Infubinol', 'Ketapril', 'Naftisol', 'Placebo', 'Propriva', \n",
    "         'Ramicane', 'Stelasyn', 'Zoniferol']]\n",
    "x_axis = cleaned_tumor_response.index\n",
    "fig, ax = plt.subplots()\n",
    "ax.set(xlabel=\"Timepoint\", ylabel= \"Tumor Volume (mm3)\", title=\"Error Bar Plot\")\n",
    "#Capomulin\n",
    "ax.errorbar(x_axis, cleaned_tumor_response['Capomulin'], yerr = None, linestyle=\"-\", fmt='o', color ='r', label = \"Capomulin\")\n",
    "#Infubinol\n",
    "ax.errorbar(x_axis, cleaned_tumor_response['Infubinol'], yerr = None, linestyle=\"-\", fmt='o', color='b', label=\"Infubinol\")\n",
    "#Ketapril\n",
    "ax.errorbar(x_axis, cleaned_tumor_response['Ketapril'], yerr = None, linestyle=\"-\", fmt='o', color='g', label=\"Ketapril\")\n",
    "#Placebo\n",
    "ax.errorbar(x_axis, cleaned_tumor_response['Placebo'], yerr = None, linestyle=\"-\", fmt='o', color='black', label=\"Placebo\")\n",
    "#Add gridlines\n",
    "ax.grid()\n",
    "#Add legends\n",
    "ax.legend(loc=\"best\")\n",
    "\n",
    "# Save the Figure\n",
    "path=os.path.join(os.path.expanduser(\"~\"), \"Desktop\", \"Error Bar Plot.png\")\n",
    "path\n",
    "fig.savefig(path)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Metastatic Response to Treatment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>5</td>\n",
       "      <td>0.160000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>10</td>\n",
       "      <td>0.320000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>15</td>\n",
       "      <td>0.375000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>20</td>\n",
       "      <td>0.652174</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Drug  Timepoint  Metastatic Sites\n",
       "0  Capomulin          0          0.000000\n",
       "1  Capomulin          5          0.160000\n",
       "2  Capomulin         10          0.320000\n",
       "3  Capomulin         15          0.375000\n",
       "4  Capomulin         20          0.652174"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Store the Mean Met. Site Data Grouped by Drug and Timepoint \n",
    "mean_met_site=combined.groupby([\"Drug\",\"Timepoint\"])['Metastatic Sites'].mean().reset_index()\n",
    "# Convert to DataFrame\n",
    "met_response_df = pd.DataFrame(mean_met_site)\n",
    "# Preview DataFrame\n",
    "met_response_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>5</td>\n",
       "      <td>0.074833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>10</td>\n",
       "      <td>0.125433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>15</td>\n",
       "      <td>0.132048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>20</td>\n",
       "      <td>0.161621</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Drug  Timepoint  Metastatic Sites\n",
       "0  Capomulin          0          0.000000\n",
       "1  Capomulin          5          0.074833\n",
       "2  Capomulin         10          0.125433\n",
       "3  Capomulin         15          0.132048\n",
       "4  Capomulin         20          0.161621"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Store the Standard Error associated with Met. Sites Grouped by Drug and Timepoint \n",
    "standard_error_met_site = combined.groupby([\"Drug\",\"Timepoint\"])['Metastatic Sites'].sem().reset_index()\n",
    "# Convert to DataFrame\n",
    "se_met_response_df=pd.DataFrame(standard_error_met_site)\n",
    "# Preview DataFrame\n",
    "se_met_response_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Drug</th>\n",
       "      <th>Capomulin</th>\n",
       "      <th>Ceftamin</th>\n",
       "      <th>Infubinol</th>\n",
       "      <th>Ketapril</th>\n",
       "      <th>Naftisol</th>\n",
       "      <th>Placebo</th>\n",
       "      <th>Propriva</th>\n",
       "      <th>Ramicane</th>\n",
       "      <th>Stelasyn</th>\n",
       "      <th>Zoniferol</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Timepoint</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>0.160000</td>\n",
       "      <td>0.380952</td>\n",
       "      <td>0.280000</td>\n",
       "      <td>0.304348</td>\n",
       "      <td>0.260870</td>\n",
       "      <td>0.375000</td>\n",
       "      <td>0.320000</td>\n",
       "      <td>0.120000</td>\n",
       "      <td>0.240000</td>\n",
       "      <td>0.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>0.320000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.590909</td>\n",
       "      <td>0.523810</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.565217</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.478261</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>0.375000</td>\n",
       "      <td>0.789474</td>\n",
       "      <td>0.904762</td>\n",
       "      <td>0.842105</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>1.250000</td>\n",
       "      <td>0.764706</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.782609</td>\n",
       "      <td>0.809524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>0.652174</td>\n",
       "      <td>1.111111</td>\n",
       "      <td>1.050000</td>\n",
       "      <td>1.210526</td>\n",
       "      <td>1.150000</td>\n",
       "      <td>1.526316</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.347826</td>\n",
       "      <td>0.952381</td>\n",
       "      <td>1.294118</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Drug       Capomulin  Ceftamin  Infubinol  Ketapril  Naftisol   Placebo  \\\n",
       "Timepoint                                                                 \n",
       "0           0.000000  0.000000   0.000000  0.000000  0.000000  0.000000   \n",
       "5           0.160000  0.380952   0.280000  0.304348  0.260870  0.375000   \n",
       "10          0.320000  0.600000   0.666667  0.590909  0.523810  0.833333   \n",
       "15          0.375000  0.789474   0.904762  0.842105  0.857143  1.250000   \n",
       "20          0.652174  1.111111   1.050000  1.210526  1.150000  1.526316   \n",
       "\n",
       "Drug       Propriva  Ramicane  Stelasyn  Zoniferol  \n",
       "Timepoint                                           \n",
       "0          0.000000  0.000000  0.000000   0.000000  \n",
       "5          0.320000  0.120000  0.240000   0.166667  \n",
       "10         0.565217  0.250000  0.478261   0.500000  \n",
       "15         0.764706  0.333333  0.782609   0.809524  \n",
       "20         1.000000  0.347826  0.952381   1.294118  "
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Minor Data Munging to Re-Format the Data Frames\n",
    "cleaned_met_sites_df=met_response_df.pivot(index='Timepoint', columns='Drug', values='Metastatic Sites')\n",
    "# Preview that Reformatting worked\n",
    "cleaned_met_sites_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Drug</th>\n",
       "      <th>Capomulin</th>\n",
       "      <th>Ceftamin</th>\n",
       "      <th>Infubinol</th>\n",
       "      <th>Ketapril</th>\n",
       "      <th>Naftisol</th>\n",
       "      <th>Placebo</th>\n",
       "      <th>Propriva</th>\n",
       "      <th>Ramicane</th>\n",
       "      <th>Stelasyn</th>\n",
       "      <th>Zoniferol</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Timepoint</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>44.266086</td>\n",
       "      <td>46.503051</td>\n",
       "      <td>47.062001</td>\n",
       "      <td>47.389175</td>\n",
       "      <td>46.796098</td>\n",
       "      <td>47.125589</td>\n",
       "      <td>47.248967</td>\n",
       "      <td>43.944859</td>\n",
       "      <td>47.527452</td>\n",
       "      <td>46.851818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>43.084291</td>\n",
       "      <td>48.285125</td>\n",
       "      <td>49.403909</td>\n",
       "      <td>49.582269</td>\n",
       "      <td>48.694210</td>\n",
       "      <td>49.423329</td>\n",
       "      <td>49.101541</td>\n",
       "      <td>42.531957</td>\n",
       "      <td>49.463844</td>\n",
       "      <td>48.689881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>42.064317</td>\n",
       "      <td>50.094055</td>\n",
       "      <td>51.296397</td>\n",
       "      <td>52.399974</td>\n",
       "      <td>50.933018</td>\n",
       "      <td>51.359742</td>\n",
       "      <td>51.067318</td>\n",
       "      <td>41.495061</td>\n",
       "      <td>51.529409</td>\n",
       "      <td>50.779059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>40.716325</td>\n",
       "      <td>52.157049</td>\n",
       "      <td>53.197691</td>\n",
       "      <td>54.920935</td>\n",
       "      <td>53.644087</td>\n",
       "      <td>54.364417</td>\n",
       "      <td>53.346737</td>\n",
       "      <td>40.238325</td>\n",
       "      <td>54.067395</td>\n",
       "      <td>53.170334</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Drug       Capomulin   Ceftamin  Infubinol   Ketapril   Naftisol    Placebo  \\\n",
       "Timepoint                                                                     \n",
       "0          45.000000  45.000000  45.000000  45.000000  45.000000  45.000000   \n",
       "5          44.266086  46.503051  47.062001  47.389175  46.796098  47.125589   \n",
       "10         43.084291  48.285125  49.403909  49.582269  48.694210  49.423329   \n",
       "15         42.064317  50.094055  51.296397  52.399974  50.933018  51.359742   \n",
       "20         40.716325  52.157049  53.197691  54.920935  53.644087  54.364417   \n",
       "\n",
       "Drug        Propriva   Ramicane   Stelasyn  Zoniferol  \n",
       "Timepoint                                              \n",
       "0          45.000000  45.000000  45.000000  45.000000  \n",
       "5          47.248967  43.944859  47.527452  46.851818  \n",
       "10         49.101541  42.531957  49.463844  48.689881  \n",
       "15         51.067318  41.495061  51.529409  50.779059  \n",
       "20         53.346737  40.238325  54.067395  53.170334  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate the Plot (with Error Bars)\n",
    "x_axis = cleaned_met_sites_df.index\n",
    "fig2, ax2 = plt.subplots();\n",
    "ax2.set(xlabel=\"Treatment Duration (Days)\", ylabel= \"Met. Sites\", title=\"Metastatic Spread During Treatment\")\n",
    "ax2.errorbar(x_axis, cleaned_met_sites_df['Capomulin'], yerr = None, linestyle=\"-\", fmt='x', color='r', label=\"Capomulin\")\n",
    "ax2.errorbar(x_axis, cleaned_met_sites_df['Infubinol'], yerr = None, linestyle=\"-\", fmt='o', color='b', label=\"Infubinol\")\n",
    "ax2.errorbar(x_axis, cleaned_met_sites_df['Ketapril'], yerr = None, linestyle=\"-\", fmt='+', color='g', label=\"Ketapril\")\n",
    "ax2.errorbar(x_axis, cleaned_met_sites_df['Placebo'], yerr = None, linestyle=\"-\", fmt='X', color='black', label=\"Placebo\")\n",
    "ax2.grid()\n",
    "ax2.legend(loc=\"best\")\n",
    "# Save the Figure\n",
    "path=os.path.join(os.path.expanduser(\"~\"), \"Desktop\", \"Met Sites Error Bar.png\")\n",
    "path\n",
    "fig.savefig(path)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Survival Rates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Mouse ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>5</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>10</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>15</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Capomulin</td>\n",
       "      <td>20</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Drug  Timepoint  Mouse ID\n",
       "0  Capomulin          0        25\n",
       "1  Capomulin          5        25\n",
       "2  Capomulin         10        25\n",
       "3  Capomulin         15        24\n",
       "4  Capomulin         20        23"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Store the Count of Mice Grouped by Drug and Timepoint (W can pass any metric)\n",
    "mice_count=combined.groupby([\"Drug\",\"Timepoint\"])['Mouse ID'].count().reset_index()\n",
    "# Convert to DataFrame\n",
    "mice_count_df = pd.DataFrame(mice_count)\n",
    "# Preview DataFrame\n",
    "mice_count_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Drug</th>\n",
       "      <th>Capomulin</th>\n",
       "      <th>Ceftamin</th>\n",
       "      <th>Infubinol</th>\n",
       "      <th>Ketapril</th>\n",
       "      <th>Naftisol</th>\n",
       "      <th>Placebo</th>\n",
       "      <th>Propriva</th>\n",
       "      <th>Ramicane</th>\n",
       "      <th>Stelasyn</th>\n",
       "      <th>Zoniferol</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Timepoint</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>26</td>\n",
       "      <td>25</td>\n",
       "      <td>26</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>25</td>\n",
       "      <td>21</td>\n",
       "      <td>25</td>\n",
       "      <td>23</td>\n",
       "      <td>23</td>\n",
       "      <td>24</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>25</td>\n",
       "      <td>20</td>\n",
       "      <td>21</td>\n",
       "      <td>22</td>\n",
       "      <td>21</td>\n",
       "      <td>24</td>\n",
       "      <td>23</td>\n",
       "      <td>24</td>\n",
       "      <td>23</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>24</td>\n",
       "      <td>19</td>\n",
       "      <td>21</td>\n",
       "      <td>19</td>\n",
       "      <td>21</td>\n",
       "      <td>20</td>\n",
       "      <td>17</td>\n",
       "      <td>24</td>\n",
       "      <td>23</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>23</td>\n",
       "      <td>18</td>\n",
       "      <td>20</td>\n",
       "      <td>19</td>\n",
       "      <td>20</td>\n",
       "      <td>19</td>\n",
       "      <td>17</td>\n",
       "      <td>23</td>\n",
       "      <td>21</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Drug       Capomulin  Ceftamin  Infubinol  Ketapril  Naftisol  Placebo  \\\n",
       "Timepoint                                                                \n",
       "0                 25        25         25        25        25       25   \n",
       "5                 25        21         25        23        23       24   \n",
       "10                25        20         21        22        21       24   \n",
       "15                24        19         21        19        21       20   \n",
       "20                23        18         20        19        20       19   \n",
       "\n",
       "Drug       Propriva  Ramicane  Stelasyn  Zoniferol  \n",
       "Timepoint                                           \n",
       "0                26        25        26         25  \n",
       "5                25        25        25         24  \n",
       "10               23        24        23         22  \n",
       "15               17        24        23         21  \n",
       "20               17        23        21         17  "
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Minor Data Munging to Re-Format the Data Frames\n",
    "cleaned_mouse_count_df = mice_count_df.pivot(index='Timepoint', columns='Drug', values='Mouse ID')\n",
    "# Preview the Data Frame\n",
    "cleaned_mouse_count_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEWCAYAAACJ0YulAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAgAElEQVR4nOydd3xO9/fA358kQoLGihitoKjW3i1aEtSoNrTqW7uqYlSN+mmNakKNokUpjU1oqdGiqBqJVTMiVFGqVkrUXjEyzu+P+yQSzXiSPCPj8369Pq8n9z73fs55Tu69537WOUpE0Gg0Go0GwMHeCmg0Go0m86Cdgkaj0Wji0U5Bo9FoNPFop6DRaDSaeLRT0Gg0Gk082iloNBqNJh7tFDSZAqVUgFJqpAXqWaiUGmMJndIgc7hSaq4tZWo01kI7BU2yKKUaKqV2K6VuKaWuK6V+U0rVsYYsEektIp9bo+44lFLvKqVilFJ3TeWMUmqBUqpCRuoVkXEi8r6l9ARQSpVKoOddpZQope4l2H7ZkvJMMncppd61dL1mym6qlDprD9maxGinoEkSpdRTwDpgOlAIKAmMAh6moy6llMos19oeEckHuAFNgfvAQaVU5fRUppRysqRycYjIeRHJF1dMu6sl2LczCV0craGLJmeRWW5UTeajAoCILBWRGBG5LyKbROQIgFLKXym1JO5gpVRp09usk2l7m1JqrFLqNyASGK6UCkkoQCk1SCm11vR3fLePUuq4Uqp1guOclFJXlVI1TdsrlFIRphbMDqVUpbT+ONNvOi0ifYHtgL+p7sZKqfAn9DyrlGqa4HevVEotUUrdBt5NaIsEduimlDpv0ntEgrpclFKLlFI3TL/z4yflmYtJhxlKqY1KqXvAy0qpPEqpyUqpC0qpy0qpmUqpPKbjCyulNiilrpjk/6yUKmn6bgLwEhBgaolMNdldlFJ9lFKnlVJ3lFJ+SqnySqm9SqnbSqmlSqlcCXR6Qyl1WCl109TyqJzgu3Cl1EdKqd9N/7ulSqncSik34GcgYeuoaHpsosk42ilokuMkEGN6gLVUShVMRx1dAF8gP0aL4zmlVPkE33cEvk/ivKVAhwTbzYGrIhJq2v4FKA8UBUKB79KhW0J+BNLSHeMDrAQKpCC7IfAc0AT4TCn1vGm/H1AaKAs0AzqnQ9+EdMRoweUH9gBfAmWAqhg2Kg3EOSUHYA5QCvAEooCvAUTkE9P5vU0tkYEJZDQDqgMNTHXNBN4x1VEDaA9g6lqcA7wPFAbmA2uUUs4J6mpvqq8sUAvoIiK3gNeBhK2jfzNoF0060U5BkyQichvjwSYYN/oVpdRapZRHGqpZKCJ/iEi06cZfg+lhb3IOFYG1SZz3PfCGUsrVtJ3IeYjIfBG5IyIPMd7wq5neNtPLRYwuMnPZIyKrRSRWRO4nc8woU+vqMHAYqGba3x4YJyI3RCQcmJZ+tQH4SUT2iEgsxkP+fWCgqf7bwHiMBzgickVEfjLpdRsYBzQyQ8YEk72PAMeBjSJyVkRuAL9iOAYwXgBmisgBU0tsvml/wnGoqSISISLXMLonq2fs52ssjXYKmmQRkeMi8q6IPA1UBkoAU9NQxYUntr/ncQugI7BaRCKTkPsXxsPndZNjeMN0LkopR6XUF6bujNvAWdNpRdKg15OUBK6n4fgnf1dSRCT4OxKIGxco8cT55tRlri7FgNxAXPfNTYwHb1EApVRepdRcU7fWbSAI8+x2OcHf95PYjvttnsAncbJN8otj2DeO5OyiySRop6AxCxE5ASzEcA4A9wDXBIcUS+q0J7Y3AUWUUtUxnENSXUdxxHUh+QDHTI4CDGfigzFI7IbRPQKgzPkdydAWiBu4TfS7TIO37k8cn5HQwpeApxNsP5OBup7U5TLwCHhORAqYipuIxLWiPsboWqorIk8B3inUlR4uYLSQCiQoriKyPI2/Q2NHtFPQJIlSqqJSarBS6mnT9jMYD+m9pkPCgFeUMXXSDRiWWp0iEo3RFz8Jo7tmcwqHLwNeBfqQ2Hnkx5gBdQ3j4T0uLb8rDlOLo4xSajrQGKNfHoyxlDxKqddMA6ifYrx9W4rlwDClVEHTIG8/S1UsIjHAXGCqUspdGTytlHrVdEh+jLfzG0qpwsBnT1RxGaOvP73MBj5QStUxyc6nlHpdKZXXjHMvY7ww5M+AfI0F0E5Bkxx3gHrAPtPMlr3AUWAwgIhsBn4AjgAHMbopzOF7jLf8FSYnkSQicglj4LO+SU4cgcA54B/gGI+dlLm8pJS6C9wGtgFPAXVE5HeT3FtAX4yH6z8YLYd0zQ5KhtGm+s4AWzCcZJqn+abAYAz77AduYbTO4gb3J2O0rq4BuzEG7BMyFehg6vqZnFbBIrIPw4l/C9zAcLBmDaSLyFFgFXDWJF/PPrITSifZ0Wjsh1KqD/COiJgz4KvRWB3dUtBobIhSqrhSqoFSykEp9RzGm/1P9tZLo4nDKqsxNRpNsjgDszAGfG9ijJ3MtKtGGk0CdPeRRqPRaOLR3UcajUajiSdLdx8VKVJESpcuna5z7927R9685syUyxloeyRG2+Mx2haJyQ72OHjw4FUReXL9DZDFnULp0qUJCQlJ/cAk2LZtG40bN7asQlkYbY/EaHs8RtsiMdnBHkqpc8l9p7uPNBqNRhOPdgoajUajiUc7BY1Go9HEo52CRqPRaOLRTkGj0Wg08VjNKSil5iul/lVKHU2wr5BSarNS6pTps6Bpv1JKTVNK/aWUOqJMaRctzcSJMLnTl1Rxdubn4V4EFytGmaJlGDkyIvWTLaxH8IgtULo0ODhA6dIEj9jCxIk2VcPgu++gdGkaeXsb+nyX0SRmGo0mK2PNlsJCoMUT+4YCW0WkPLDVtA3QEiOSY3mM7E3fWkMhp8NfMvj7zzgeFcXkS9Dy8hXOXrnA7xt8rSEuWerc2kL7cdUIPlcGRAg+V4b246pR59YWm+rBd9+Bry+cO4cSgXPnjG3tGDSaHIvV1imIyA6lVOkndvtgxK4HWIQRuvgT0/5AMWJu7FVKFVBKFTeFT7YYC1YMx5EoYgDOw0NiAdgcGsRnr2yzpKiU2R9KSy7SmnX4sJrNvMpy2uM14xA49redHtOmQeQTic8iI2HECOjUyXZ6aDSaTIOtF695xD3oReRSgpjpJUmcVjDctO8/TkEp5YvRmsDDw4Nt27aZLbxZ7SiOXgLOg8kfgILI4hX5fGc1FBlJ85sWXgFAcGApnXiPuXixDbkFjBljIx0AkSTTlcm5c2wPCjK6tnIod+/eTdO1lZ3RtkhMtreHiFitYKRKPJpg++YT398wfa4HGibYvxWolVr9tWrVkrQQ5OEhuXEQjNR/iUqePHnkf//7n6xfv16ioqLSVG+a8fSUIBpLYa7IU9wUR6LkF14V8fS0rtwk9BBIupQqJTJsmMixY7bVKZMQHBxsbxUyDdoWickO9gBCJJnnqq1fBS8rpYqDEVce+Ne0P5zEuWqfBi5aWvh7sS48jHs3dgKnuL/zQBnvMmzevJnXXnuNkiVLMmjQIEJDQ+OclEUJ7jSX9ixnBW/zI28SgxNvsprgTnMtLitFxo4FV9fE+1xc4IMPoFIlY0T8hRegTh2YPh2uXLGtfhqNxubY2imsBbqZ/u4GrEmwv6tpFtKLwC2x8HgCQOdee/Cp2Qp3BwfaVYCe+fLi5upGjY6dOFH3BO6fuTNlwRRefvllZs6cSa1atahSpQoTJkwgPNxyGRkPuDVl+fDDeHmeoYkKpl/+hdzHhaVXmlpMhll06gSzZ4OnJ6IUeHrCnDnwzTewYQOEh8PkyRATA/37Q4kS8MYbsHIlPHhgW101Go1tSK4JkdECLMUYE4jCaAn0AApjdA2dMn0WMh2rgBnAaeB3oLY5MtLafZSQJ5uAW//eKsW/LC65P88t0/dNl6tXr8q3334r9evXF0CUUtKkSRNZtGiR3LlzJ91yk+LePZEKFYwem5s3LVq12aTaJP79d5GPPxYpUcLoXnJzE/H1Fdm5UyQ21iY62pLs0EVgKbQtEpMd7EEK3UdWHVOwdrGkUxAR+ffuv9Lqu1aCP+Kz1Eeu3rsqIiKnTp0SPz8/KVOmjADi6uoqnTt3lk2bNkl0dHS6dUjInj0iDg4i3btbpLo0Y/aFHh0tsnmzSJcuInnzGpdQ2bIin30mcuqUVXW0JdnhxrcU2haJyQ72SMkp5NzpJUngnteddR3WMaX5FDac2kD1WdXZcW4H5cqVw9/fn9OnT7Nr1y46d+7MunXrePXVVylVqhQff/wxv//+e4Zkv/giDB0KCxbAzz9b6AdZA0dHaNoUAgMhIsL4fPZZ+PxzKF8e6teHgAC4ft3emmo0mnSgncITKKUY+OJA9r6/FxcnF7wWeTFq2yhiYmNQStGgQQNmzZrFpUuXWLFiBbVr12bKlClUrVqVGjVqMHnyZCIi0rdC2s8PqlWDnj3h6lUL/zBrkC8fdOkCmzbBhQvGwPSdO9CnDxQvDm+9BatXw6NH9tZUo9GYiXYKyVCzeE0O+h6kU5VO+G/3xzvQmwu3Hi+lyJMnD+3atWPNmjVcvHiR6dOnkytXLgYPHkzJkiVp2bIlS5cuJfLJxWEp4OxsvHhfvw69extzQ7MMJUvCkCFw5AgcOmTMYNq1C9q2NQao+/WDffuy2I/SaHIe2imkQP7c+QlsG0hgm0BCL4VSfVZ11pxY85/j3N3d6devH/v37+f48eMMHTqUY8eO0bFjR4oVK8Z7771HcHAwsbGxSUhJTNWqRk/MqlXw/ffW+FVWRimoXt2YtfTPP8YspmbNYN48o4+sYkVjgd7Zs/bWVKPRJIF2CmbQpVoXQn1DKV2gNG1+aMOHGz7kQXTSUzIrVqzI2LFjOXPmDMHBwbz99tusXLkSb29vypQpw/Dhwzl+/DjBwcFUqVKFiIiIRH8D/N//GV3z/foZz1VrEif7+vXr/9Ejwzg5QcuWsHQpXL5sOIYSJWDkSChTBho1MvbduhUfmC8uQKCOv6TR2AclWbg5X7t2bbFljuaH0Q8ZtnUYU/ZOoapHVZa9tYzn3Z9P9bzIyEjWrl1LYGAgmzZtIiYmBgdTCIk6depw+PBhoqKiaN++PX5+foARm87HB2rXNpYOqKTiUWSQvXv30rt3b6KioqhSpQonT57k0aNH+Pr6MmPGDMsLjOPcOeOhHxgIf/5pOA8RYz1EHK6uxhoKO8Vgyg55eC2FtkVisoM9lFIHRaR2kl8mNy0pKxRLT0k1l/Un10uRiUXEdayrzAudJ7FpmKd/6dIlKVasWJKhNuxZlFLxf7u7u6fbNmkiNlZk/36R/Pkl2VAbdiI7TDu0FNoWickO9iCFKam2DoiXLWhVvhWHex+my09d6LG2B5v/3kzAawG45Uk9oF6xYsUIDQ2lc+fO7N69mwemlcHOzs706dOHevXqxR8rAuPHw8mT8MUXUKyYZX/HjRs3mDFjBidPniQ6OhoAFxcXZs6caVlByaGUEULj7t2kvz9/HiZMMFoLTz9tG500mhyOdgrppET+EmzqvIkJv03gs+DP2Be+j2XtllG3ZN1Uzz1x4gR79+6NdwhxPHr0iA4dOiTa98orULmyMfC8fbuxTMBSBAcHc/bs2XiHABAdHU1QUBDt2rWznKDUKFXK6FJ6kty5jcUbw4aBt7cx/fXNNyF/ftvpptHkMPRAcwZwdHBk+MvD2dF9B7ESS4P5DZj420RiJeVZRv379+eRae6+i4sLzs7OPHr0iJUrV/7n2KefNkIR/fYbfPWVZfVPqIezszMAUVFRrFixwrKCUiOpwHyursYg9F9/GQs4zp6Fd981mktxayMSjkFoNBqLoJ2CBaj/TH3CeofRpmIbPtnyCS2WtCDibvIzeDZv3oyvry/u7u4EBgbSo0cP3N3d+eGHH5I8vlMn4wV55EjI4MLpZPUYPnw4LVoYifJatmxpOSHmkCAwH3GB+eIGmZ991nAKp04ZnrFrV1i3Dpo3N1oYQ4ZY1igaTU4nucGGrFDsNdCcHLGxsTIrZJbkGZNHik4qKr/+9avF6v73X5GiRUWqVxd5+NBi1cYTZ4+uXbuKo6Oj7N+/3/JCLMWDByIrV4r4+Ig4ORmD0tWqiXz1lcilSxYRkR0GEy2FtkVisoM90LGPbINSCt9avoT0DMHd1Z3mS5rz8eaPeRST8TAP7u7Gy3NYmLG4zVp8/fXXlChRgq5du3L//n3rCcoIuXM/DqFx6ZLRv5Y7NwwebKysbtnSWPmXhtXkGo3GQDsFK1CpaCUO9DxA71q9mbR7Eg3nN+TvG39nuF4fH6Nbfdw4I2KENShQoAALFizgxIkTDB8+3DpCLEmRIkZIjX374MQJY1D6+HGj68nDA7p3h+BgMGM1uUaj0U7BarjkcuHb1t+y8u2VnLp+iuoB1Vn6+9IM1zt1qjH43LWr9V6EmzRpQr9+/Zg6dWrWykX73HNGCI2//4Zt2+B//zOmbXl7G6ukhw83HIZGo0kW7RSszFsvvEVYrzCqeFSh448deW/Ne9x7dC/d9bm5GeG1T540XoqtxYQJEyhfvjzvvvsut2/ftp4ga+DgYITQmDvXCK+xbBlUqZI4vei0aTq9qEaTBNop2ADPAp5sf3c7I14ewcKwhdSaXYuwiDAA/Lf5p7k+b2/48EPjuRYUZGFlTbi6uhIYGMiFCxcYNGiQdYTYAhcXo8Wwfr0RSGrKFGMq64ABRhym11+HFSsepxc1xWBqFNe60DGYNDkM7RRshJODE2O8x7Cl6xZuP7xNvbn1mL5vOqO2j0pXfV98ARUqGF3mt25ZWFkTL774IkOHDmX+/Pn8nKkz/5iJhwcMHAihocY01o8+MsJ8t29vrH/w9oYePeDcOZSIsaDO11c7Bk2OQjsFG+NdxpvDvQ/TrGwz+m/sD8APR3/gflTaZvq4uhrx5MLDjeectfDz86NatWr07NmTq1ki84+ZVK5shNA4dw42bzZG8bdtg4cPEx8XGQkjRthFRY3GHminYAdmHJjB+lPr47ffWfUOruNcqTmrJjvO7Uh1RXQc9eoZ4woLF8LatdbR1dnZmcDAQK5fv07fvn2RLBxVN0ni0osuWpT8MefO6fSimhyDdgp2wL+xP+IniJ/xgN3adSvvVn+XU9dP0WhhI8p+XZaRQSM5ee1kqnV99pmR06ZnT+uNm1atWpXRo0ezYsUKli1bZh0hmYFSpZL/rlgxY1m5Ti+qyeZop5AJ8C7jzQKfBUQMjuC7N7+jYpGKjNs1jue+eY56c+sxY/8MrkYm3XUTl8Lz5k0jNbK1XuSHDBnCSy+9RN++ffnH2pl/7EVyMZjGjjVG9nfvNtKLFi9urI3Yu1enF9VkO+ziFJRSA5RSR5VSfyilBpr2FVJKbVZKnTJ9FrSHbrbGr5Ff/N95nfPSsUpHNnbeSPigcL5s9iUPoh/Q75d+FP+qOG2WtWHVsVU8jE7c712lCowebd0Uno6OjixatIhHjx7x/vvvZ79uJEgUg0kSxmAaPtyIRhgeDr/8YsRdmj8fXnrJWBvx+edw5oy9tddoLENy8S+sVYDKwFHAFSN09xagPDARGGo6ZigwIbW6MlvsI2sRdilMBv86WIp9WUzwRwp+UVB6/dxLfjv/W3yCn+hokfr1RQoUELlwIe0yzLXHjBkzBJCAgIC0C8lCpGqPW7dE5s8Xadz4cVKgl18WmTNH5OZNm+hoK7LSvWILsoM9yGSxj54H9opIpIhEA9uBtoAPEDfatwhoYwfdMiXVilXjy1e/5MKgC2zstJFW5VsReDiQBvMbUH56eUZtG8XZW6dZtMjo7u7Rw3q9Gn369KFZs2YMHjyY06dPW0dIVuCppx6H0Dh71uhiunLFGNzx8Hi8NiIqyt6aajRpwuY5mpVSzwNrgJeA+8BWIAToIiIFEhx3Q0T+04WklPIFfAE8PDxqpXfg8+7du+TLly9d52YGIqMj2XF1B5subyLsZhiCUPmpynhEtGfrtH4M7H0FH5+LZteXFntcuXKF7t27U7ZsWaZMmYKjJTP/ZBLSdX2IkP/PP/HYtImiQUE437rFowIF+LdJEyKaNeNuhQrWSbZtZbL6vWJpsoM9vLy8MleOZqAHEArsAAKAKcDNJ465kVo9OaX7KDXO3zwv43eOl+e/eV7wR9RnzuL4TjsJCF4jD6PNi7OdVnsEBgYKIBMnTkyHxpmfDF8fDx+KrFkj0q6diLOz0b30wgsi48eLnD9vER1tRXa6VyxBdrAHmaz7CBGZJyI1ReQV4DpwCrislCoOYPr81x66ZUWecXuGoQ2H8kffPwjpGcJ7VfoQW2o7vbf7UHJyST7c8CEH/jlg0cHhzp0707ZtWz799FOOHj1qsXqzDc7O8MYbRgiNiAiYNQsKFTIWlnh6QpMmxtqIO3fsralGkwh7zT4qavosBbwJLAXWAt1Mh3TD6GLSpAGlFLVK1GJuu6ksqPIPfLeOEg+9mRM6h7pz6/L8jOcZt3Mc527+Nx/ywrML0yxr1qxZuLm50bVr1/i0npokKFjQCJexc+fj9KLnzhlx0D08oHNn+PXXx+lFTfGXcHCwb/ylzBIHKrPYI6eQXBPCmgXYCRwDDgNNTPsKY4wvnDJ9FkqtHt19lDyxsSJvvWX0XOwKuSFzDs6Rl+e/LPgj+CONFzaWeaHz5NaDWyIigj/pkrN69WoBZOTIkZZU3+5Y/fqIjRX57TeR3r2NKWMgUry4SKtWInnyPJ7RBCKuriJLllhXnydZssSQq/X4D9nh2UEK3Uc2H2i2JLVr15aQkJB0nbtt2zYaN25sWYUyGVeuGCF+iheH/fuNHo0zN86w5MgSFh9ZzKnrp8jjlIc2Fduw7Oiy+BXWaeXdd99lyZIl7N69m7p161r4V9gHm14fDx8aM5UCA2FNMg3kggWNJN224vPP4caNzKuHp6cx68sOZIdnh1Iq2YFm7RSyOWvXGrHeRoww8s/EISL0/Lkn8w7N+885fo388G/sb7aMW7duUaVKFVxdXTl06BAuLi4W0Ny+2O36cHDQq6TNQSmju80Os7myw7MjJafgZGtlNLbljTeMruvx443UAfXqGfuVUsx9Yy5z35jL+Vvn8ZzqiUdeD3b32E3ZgmXTJMPNzY0FCxbQtGlThg0bxtSpUy3/Q3IKpUoZ4w1P8swzRrhvW1GlCly4kHn1EDFix3fpYozJlE3bNatJgeT6lbJC0WMK5nHzpkipUiIVKojcu5f0MfgjhSYUkme/flYi7kSkS06/fv0EkKCgoAxomzmw2/WRWfrQM7MeLi4iPXuKeHk93tewocisWSI3blhdpezw7CCFMQW7P9gzUrRTMJ+tW43/9ocfJv19twXdZM+FPeI61lVqBNSIH4BOC/fu3ZMKFSqIp6en3LqV9vMzE3a9PpYsEfH0FFHK+LTXoKpJj9hMokeS9jh3TmTcOJGKFY0LPHduY23I2rUijx5ZRZ3s8OzQTiEJssM/Nq3072/8x7ds+e93cfbYcHKDOI12Eq+FXnI/6n6aZezZs0ccHBzkvffey6C29iUnXh/JkSVsERsrcuCA8dZTpIhxoRcpYmzv3298byGyhD1SISWnoENn5yDGj089hWfL8i1Z6LOQ4LPBdPqxEzGxMWmSke1SeGqyBkpB7dpG4vKLF40ZFl5exqLBunXhhRdg3Dg4f97emmZ6tFPIQcSl8Pznn5RTeHaq2okpzafw4/Ef+WDDB0aTMg1k2xSemqxBrlzGrIrlyx+vJi9SxJiC5+lp5OJesABu37a3ppkS7RRyGOam8Bz44kCGNRzGrIOz8Nvml/yBSZAwhWefPn3S7FQ0GouRcDX56dMwapTRWnjvPSObXseOsHEjREfbW9NMg3YKORBzU3iO9R5Ljxo9+HzH50zfNz1NMuJSeK5cuZKlS5dmUGONxgKULWtc/KdOGVn0unUzHELLlvD00zB4MISF5fh1Itop5ECcnWHxYiOFZ+/eyd8DSikCWgfg85wPAzYOYNnRtIUpHzJkCPXr1+eDDz7Ivik8NVkPpYysed9+C5cuGSkLX3oJpk+HGjWgWjWYNMkYm8iBaKeQQ6lc2QjU+eOPieOLBQfDxImPt50cnFj61lIalmpI15+6svn0ZrNlJEzh2aNHj2S7kSZONOQm5Ek9NBqrkDs3vPkm/PST4SBmzDAG3z7+2Fio9+qrsGQJ3LuXYwIE6hXNOZiPPoLNm43WwvTprly7ZnS/zp4Nly8nPNKFuU3W0nZtI9osa8uqN4KpUbSOWTLy5y/HyJGTGDbsAyZNmkW3br3/c8yzz0K7djBnDrRtC9u2Qfv2xjihRmMzCheGvn2NcvKk0ZxessRYNe3sbITViIlBgbHqvGdPYxrfW2/ZTsdVq+D//g/u3ze2z50zblowcoxbguTmqmaFotcpZJzFiyXRYtEUS76LwoAywseFhcInzD+PWIFmAnkF/krx2IIFjQWsixfb1y76+nhMjrZFTIzI9u0i+fKl4UaxQ/H0TNPPIoV1CrqlkMPp3Bl27DDe0lu2NGbyJU9x/o3exFc3GpBrwKv8X8HdFHAsaYYUxY0b8xkzpjIlSnRj0KDtODj8N4Xn6tWwaZPxd5cuEBBgfLZvb0wi0WhsjoMDvPKK0X2UHDNn2k6fvn2T3m/J9RfJeYusUHRLIeMEBRkLP7t0OSNFihjbqXHw4kHJPy6/VJpRSa5FXjNbVkopPOP0GDlSpFAhI7TNCy8YL0HOzkZuiNWrjSyXtkBfH4/RthDjTdwCb+iZRQ90mIv/oi/0xw/ioCDDHgm3Uz337yBx/txZ6s+rL/ceJRNl7wliY2PlzTffFGdnZzly5EiSeiTc3rpV5OBBkYEDRYoWNa7WwoVFPvhAZN8+i0Yu+A/6+niMtoVk7gCB6dAjJaegZx/lYA4cMAZzvbyMbS8vY/vAgdTP9Srjxfdvfs+eC3tov6I9UTFRqZ6jlCIgIIACBQokSuGZnB4hIVCzJkyZAuHhsG4dNG0Kc+cai/Cefx7Gjk060rRGY1E6dTJmYHh6IkoZK6Nnz7bc4G469MBaeiTnLbJC0S0Fy5FeewQcCBD8ka4/dZWY2BizzolL4fnpp5+mS+bNmyJz54q88srjl6VGjUTmzeLQz/4AACAASURBVBOxVHBWfX08RtsiMdnBHuiWgsZa9Krdi9GNRxN4OJBPNn9i1jk+Pj5069aN8ePHs3///jTLdHODHj1g+3Y4c8bI2HjpkrHPwwM6dIANG3TkAo0mPWinoMkwn77yKf3q9OPLPV8y6bdJZp3z9ddfU6JECbp27UpkZGS6ZZcuDZ9+CidOwN69hmPYtAlee82IXDBoEBw6lOMjF2g0ZqOdgibDKKX4uuXX/K/S//h4y8csDFuY6jlxKTz//PNPhg0bZgEdjHGGb74xWg2rV0ODBsZswZo1jayOEycaEWI1Gk3yaKegsQgOyoHAtoE0K9uM99e+z89/pp5LoUmTJnz44YdMmzaNoKAgi+ni7Aw+Psbiz0uXjBA3bm7wySdG5IJmzYwQ4nfvWkykRpNtsItTUEoNUkr9oZQ6qpRaqpTKo5Qqo5Tap5Q6pZT6QSnlbA/dNOnH2dGZVe1XUbN4TdqvbM+u87tSPeeLL76gQoUKdOjQgRdeeIGIiAiCg4OpUqUKERERGdapUCEjjMdvvxnBMT/7zIig3K2bMf7QpYsR6iMmRsdg0mjADk5BKVUS6A/UFpHKgCPwDjABmCIi5YEbQA9b66bJOPlz52d9x/WUcivF60tf5/fLv6d4vKurK/379+fff//lxIkTdOrUidatW3PixAk+//xzi+pWrhz4+xtOYdcuYzX3unVGzLNSpSA01AhjE+cYgoON1dR1zAvzpNFkC+zVfeQEuCilnABX4BLgDaw0fb8IaGMn3TQZxD2vO5s6b8I1lyvNlzTn7M2zKR4fEBCAUgoRYceOHURGRhIdHc2KFSusop9SxnjDrFlG99KKFUYmx1Wr4MYNo3tp/Pjn4oPyxa2f0GhyAkrsMC1DKTUAGAvcBzYBA4C9IlLO9P0zwC+mlsST5/oCvgAeHh61li1LW4z/OO7evUu+fPnS9wOyIdawx5l7Z+gf1p8CuQowrfo0CjonHcDo2rVrjBkzhiNHjhAbGwsYg9ctW7bE19cXNzc3i+qVHDdv5iI4uCjz55fm7t1cVK16k8mTD+PomLOnLul7JTHZwR5eXl4HRaR2kl8mt4DBWgUoCAQB7kAuYDXQBfgrwTHPAL+nVpdevGY5rGWPXed2icsYF6k1q5bcfnA7yWOCgoLE1dVVgP+UXLlySZs2beTHH3+UBw8eWEXHxLoYoTTKlr0jIFKlisj581YXm6nR90pisoM9yGSL15oCZ0TkiohEAT8C9YECpu4kgKeBnJn2KJvRoFQDVry9grCIMNr+0JaH0Q//c0z//v3jQ164uLjg7GzMMShYsCAffvghe/bs4c0336R48eL07duXPXv2xL08WJS4MYQVK2DevBCGDYPff4cXXoA1aywuTqPJlNjDKZwHXlRKuSqlFNAEOAYEA+1Mx3QD9G2YTXitwmvM95nP1jNb6bq6KzGxMYm+37x5M76+vri7uxMYGEiPHj1wd3dn1apVfPXVV4SHh/PLL7/QokULFi5cSP369alQoQKjR4/m77//tpieT8ZgGjfOmLrq5gZt2kC/fvDggcXEaTSZk+SaENYswCjgBHAUWAzkBsoC+4G/gBVA7tTq0d1HlsMW9vjyty8Ff+SD9R9IbDpDnN66dUvmz58vXl5e8V1MDRs2lNmzZ8uNGzcspmtCezx8KPLRR0aMpapVRY4ds5iYLIG+VxKTHexBJus+QkT8RKSiiFQWkS4i8lBE/haRuiJSTkTeFpH/9jNosjSD6w9mSP0hzDgwg893pG+66VNPPUX37t0JCgri3LlzjBs3jqtXr+Lr60uxYsVo374969atIyoq9ait5uLsDF99ZcRTunTJmKk0b54OnaHJnqTqFJRSFZRSW5VSR03bVZVSn1pfNU12ZELTCbxb/V38tvkREBKQobpKlSrFsGHDOHbsGAcOHMDX15fg4GBef/11SpYsyYABAwgJCbHY+EPLlnD4MLz0Erz/vhF479Yti1St0WQazGkpzAGGAVEAInIEY7GZRpNmlFLMeX0OrSu0pu/6vqw8tjL1k8yos3bt2kybNo2LFy+ydu1aGjduzKxZs6hTpw6VKlVi/PjxXLhwIcOyiheHX381xhtWroQaNWDfvgxXq9FkGsxxCq4i8mR8Yx2UWJNunByc+KHdD9R/pj6dfuxE0BnLxT3KlSsXr7/+OsuXLyciIoLZs2dTuHBhhg8fjqenJ97e3ixcuJA7d+6kW4ajIwwbBjt3QmwsNGwIEyYYf2s0WR1znMJVpdSzGIN6KKXaYaxA1mjSjWsuV37u8DMVClfAZ5kPBy8eBMB/m7/FZBQoUICePXuyc+dOTp8+jb+/PxcuXKB79+54eHjQqVMnNm7cSHSCxAtxcZe+PfxtqjGYXnoJwsKgbVsYOhRatAALhGuKx5K20GjMJrkRaHk8U6gssAWIBP4BdgGeqZ1ni6JnH1kOe9njn9v/iOcUT3Gf6C4nr54U/LGqvNjYWNm9e7f06dNHChYsKIAUK1ZMBg8eLHPmzBFXV1dxcnISShP/d9++fVOpU2T2bBEXFyOX9MaNltHV2rYwF32vJCY72IMUZh85JestEvkNaaqUygs4iMgdpVQZK/koTQ6jRP4SbOqyiQbzG/DqklcBWHBogXWF5oE6PetQvVt1juw8wu4Nu5n69VRiohOsnwiHyGgj+c/ipYup/X7SEQHicKoNI1YYYbpbDIXm24zgek6OGVP11oNbuOWxTZgPjQYwyymsAmqKyL0E+1YCtayjkian8f3v33M18ipXI68C8N7a92yrQCOgDhCC0Q5+xONRMye40/SO+TrVMcqvwK/rM65agQkFAOhYuSOL2i7CycGcW1ajST/JXmFKqYpAJcBNKfVmgq+eAvJYWzFNzsG/sT/+jf258/AOT33xFGcHnLWLHrt37qbHnh7c5378PkdxpEP+DowZMCZNdf3yi5HUJyYGxo0HnzfSrk/pr0vzQZ0PWHZ0Gd8f/Z4tZ7bQsXJHulTrQo1iNTACAmg0liWl147ngNZAAeD1BPvvAD2tqZQmZ5I/d34APAt42kV+6+GtHy96cwIVo4iJiWH5kuV8PelrChUqZHZdvTtAy/rQqRMM6AZh3WHaNEhrcM1vWn3D5OaT+eXULyw+spiZITOZum8qldwr0aVqFzpV7cTTTz2dtko1mhRIdvaRiKwRke5AaxHpnqD0F5HdNtRRk4Pwa+RnN9kJYzA18m1Er169yJs3LzExMVSvXp2dO3emqT5PT9i2DT79FBYuNFZCh4WZf36cLZwdnfGp6MPK9iu5NPgSAa8F4JbHjaFbh1JqSimaBjYl8HAgdx/p/KIaC5DcCHRcwegq+gCYCcyPK6mdZ4uiZx9ZDm2PxCS0R0hIiJQrV04cHBxk1KhREh0dneb6goJESpQQcXYWmTbNmLGUUU5dOyV+wX5S9uuygj/iOtZVOv/YWX7961eJjkm7jsmhr43EZAd7kMHYR4uBYkBzYDtGWOv0r/zRaLIYtWrVIjQ0lI4dO+Ln50eTJk0IDw9PUx1eXkaIjFdfhf79jair165lTK9yhcrh39ifvz78i13dd9GlahfWnVxH8yXNKTW1FEM2DUk1HapG8yTmOIVyIjISuCcii4DXgCrWVUujyVzkz5+fxYsXs2jRIkJCQqhWrRpr165NUx1FisDatTB1KmzcCNWqwfbtGddNKUWDUg0IaB3ApcGXWPn2SmqXqM3UfVOpGlCV6gHVmbxnMhF3LbiyTpNtMccpxIWbvKmUqgy4AaWtppFGk4np2rUroaGheHp64uPjQ//+/XmQhiQLSsGAAbBnD7i6grc3+PlBtIUCx+RxysNbL7zFmnfWcPGji0xvOR1nR2cGbxpMycklafldS77//XsioyItI1CT7TDHKcxWShUEPgXWYiTEmWhVrTSaTEyFChXYs2cPAwcOZPr06bz44ov8+eefaaqjZk0IDYUuXWD0aKN7yQLx+hLhntedfnX7sb/nfo5/cJyhDYZy7MoxOv3YCY8vPei+pjvBZ4KJFR20SfOYVJ2CiMwVkRsiskNEyopIURHJWMxjjSaLkzt3bqZMmcLPP//MP//8Q82aNVmwYEGawnTny2fMSlq82JiVVK0arF5tHX0rFqnI2CZjOTPgDMHdgmn/QntWHVuFd6A3paeWZvjW4Ry/ctw6wjVZihSdglLKUSlVJMG2s1Kqp1JKXz0aDdC6dWsOHz5MvXr1eO+99+jUqRO3b99OUx2dO8OhQ1C2rBFcr00buP94/RzBwTDRQm1zB+VA49KNmeczj4j/i2DpW0upXLQyE3+byAszX6DOnDpM2zeNf+/9G3/OwrMLLSNckyVI1ikopd4BrgNHlFLblVJewN9AK6CTjfTTaDI9JUqUYPPmzYwZM4bly5dTo0YN9u9/Mtp8ypQrB7t3w9tvw5o1UKkSHD9uOIT27aFOHcvr7ZrLlXcqv8OGThsI/yicya9OJiY2hgEbB1ByckleX/o6K/5YwaJziywvXJNpSaml8ClQS0RKAIOAjcCHItJWREJtop1Gk0VwdHRkxIgRbN++nejoaBo0aMCkSZOITUOSBWdnWL4cxo+Hs2ehcmUjHPfAgUbOBmtSLF8xBr00iNBeofze53c+evEjQi+F0n5lewB8f/Zl57mdFstip8m8pOQUHonIXwAmJ3BGRH6yjVoaTdakQYMGhIWF4ePjw8cff0yrVq24fPlymuoYOtSYoRQbC05OxoroEiWM9Q0HDlg/N3TlopVxyeXCxTsX4/fNCZ3DKwtfodCEQnwW/Bmnrp2yrhIau5GSUyiqlPoorgD5ntjWaDRJULBgQVasWMG3337L9u3bqVatGps2bTL7/OBgWLIERo40pq2OHWvMTpo9G+rWhRdeMNKBnj9vvd/g39gf8RPEz/BAd4bdIbBNIHVK1mHMjjFU+KYCL817iW8PfMv1+9etp4jG5qTkFOYA+ROUJ7c1Gk0yKKXo3bs3Bw4coHDhwjRv3pxPPvnkccC9ZIgbQ1i+3Jiqunw5TJkCffoYWd1mzwZ3dxgxwoit5OUFCxZAGse200w+53x0qdaFTV02cWHQBSY2ncidh3fou6Evxb4sxps/vMnqE6t5FPPIuoporE9y8S+sVTCir4YlKLeBgUAhYDNwyvRZMLW6dOwjy6HtkRhL2uPevXvi6+srgNStW1dOnz6d7LETJhhxkhISFGTsT8jff4uMHi1SrpwIGFnfOnQQ2bBBJCrKYqqLiEi3Bd2S3B8bGyuhF0Nl0MZBUnRSUcEfKTShkPRd11f2XNgjsZYI8JQJyQ73CinEPrJrQDvAEYgAPDEWxA017R8KTEjtfO0ULIe2R2KsYY/ly5eLm5ubPPXUU7J06VKL1BkbK7Jnj0ifPiIFCxp3tIeHyKBBIocOWSbwnjm2iIqJkg0nN8g7K9+RPGPyCP5I+WnlZfS20fL39b8zrkQmIjvcKyk5BXNWNFuTJsBpETkH+ABxc98WAW3sppVGYwXefvttwsLCqFSpEh06dKBHjx7cu3cv9RNTQCl48UWYORMuXYIff4T69eGbb6BGDahaFSZNgosXU68rIzg5ONGyfEuWvrWUy/93mXlvzKPkUyX5bNtnlJ1WllcWvMLc0LncenDLuopoMowSO04xU0rNB0JF5Bul1E0RKZDguxsiUjCJc3wBXwAPD49ay5YtS5fsu3fvki+tGU+yMdoeibGmPaKjo1m4cCHff/89zzzzDCNHjqRcuXIWlXHrlhPbthVl0yYPjh1zw8FBqFnzBq++epmGDa/g4mL+VNmM2CLiQQRbLm9h0+VNXLh/gVwqFw2KNOBVj1epU7BOlkwvmh3uFS8vr4MiknTi8eSaEMBHKZXkzjO3AM7AVcDDtH3zie9vpFaH7j6yHNoeibGFPbZs2SLFihWT3Llzy/Tp063WB3/ypMjIkSKlSxvdS3nzinTtKrJ5s4g5qSEsYYvY2FjZH75f+q3vJ4UnFBb8EfeJ7tJ/Q38J+SckS40/ZId7hXR2H+VPpWSUlhithLhJ3JeVUsUBTJ//JnumRpMNaNKkCUeOHKFJkyZ8+OGHtG3blmsZTbKQBOXLGzOZTp+GHTugY0dj1XSzZsYMpk8+gaNHLS42EUop6pSsw/RW07k4+CJr3lnDK56vEHAwgNpzalNpZiW+2PUFF25ZOCqgJu0k5y2sXYBlQPcE25NIPNA8MbU6dEvBcmh7JMaW9oiJiZHJkydLrly55Omnn5YpU6ZI5cqV5dKlSxIUFBT/tyWJjBT54QeR1q1FHB2NFkSNGiKTJ4tERCSeBRVni6RmQWWU65HXJeBAgDSY10DwR5S/Eu9F3rLw0EK5/eB2omP9gv0sKzydZId7hYzMPsIK6TgBV+Aa4JZgX2FgK8aU1K1AodTq0U7Bcmh7JMYe9ggJCZESJUoIIEopady4sbi6uoqTk5P07dvXanIvXxb5+muRWrWMJ4Kjo0jduiL584v88othi6AgkSJF/jtd1pL8de0v8Q/2j08v6jLGRTqt6iQbT22U6JhowR/rCU8D2eFeSckp2CUdp4hEikhhEbmVYN81EWkiIuVNn3qZpCZHUatWLdzc3FBKISLs2LGDyMhIoqOjWbFihdXkFi1qhNAICYE//oAhQ4zZSnfuQKtW0K9fjfgFdV5eVlODZws9i19jv/j0ol2rdWX9qfW0+K4Fz0x5BoDoWAtlI9Iki07HqdFkIrZu3YqXlxfOzs7xwfScnZ2ZOXOmTeS/8IIRkO/cOQgKggoV4I8/3GjWzLoOISEJ04t+UOcDAC7dvQRArs9zoUYp/Lf520aZHIhOx6nRZCJOnDjB3r17efTocbiIR48eMWrUqDSl/cwoDqYnw7VrkC9fFMuXw5YtNhMfzxjvMYliMOXNlZeCeQpSvVh12yuTQ0hLOs6RPE7HOcGqWmk0OZT+/fvHOwQXFxecnZ0BOHr0KPXq1eP4cdvkt0oYg2nw4JPExBgJgIKDbSI+WQ71OkSZgmVo+0NbPlj/AQ+ibecocwrmOIUFYqTj3C6P03HOsrpmGk0OZPPmzfj6+uLu7k5gYCA9evTA3d2dcePGcfHiRWrXrs28efPiJmdYjQMHHo8hNGp0hXr1IE8e+O03q4pNEb9GfpQvXJ7d7+1m0IuDmBkyk7pz6uo0opYmuRFoeTwr6DwwGyMkhUrteFsWPfvIcmh7JCYz2uOff/4RLy8vAeR///uf3Lx50yZyg4ODZccOY2bS2LE2EWkW60+ulyITi4jLGBeZc3COzRbAZcZrI62QwdlHzwFbMKalnlVKfaOUsnIeKI1G8yQJ036uXLkyXWk/08vLL4OPD3zxBVy5YhORqdKqfCsO9z7MS8+8RM+fe9JhVQcdW8kCpOoUROS+iCwXkTeB6sBTGFNTNRqNjYlL+7ljxw5iYmJo0KABEydOTFPaz/TyxRcQGQmff251UWZTIn8JNnXexFjvsaw8tpIas2qwL3yfvdXK0pgVJVUp1UgpNRMIxVjM1t6qWmk0mhSpX79+fNrPTz75hBYtWhAREWFVmRUrwvvvw7ffwl9/WVVUmnB0cGT4y8PZ0X0HsRJLwwUNmbBrArFifUeZHUnVKSilzmAkwdkJVBaR9iKyyuqaaTSaFIlL+xkQEMDOnTvTnPYzPfj7Q+7cMHy4VcWki/rP1CesdxhtKrZh6NahtFjSgoi71nWU2RFzWgrVRKStiCwVkYwFf9doNBZFKUWvXr04cOAA7u7uNG/enI8//jjROgdLUqyYseJ5xQrYlwl7aQrkKcDydsuZ1XoWO8/vpFpANX7961d7q5WlSNYpKKU+Nv05Vik17cliI/00Go0ZVK5cmf3799OrVy8mTZpEw4YN+fvvv60ia/Bg8PCA//s/sPLM2HShlMK3li8hPUNwd3WnxXctGLJpiM4fbSYptRTiJv+GAAeTKBqNJhPh6upKQEAAK1as4NSpU1SvXp2lS5daXE6+fDBqFOzaBWvXWrx6i1GpaCUO9DxA71q9+XLPlzSc35DT10/bW61MT7JOQUR+Nv15REQWPVlspJ9Go0kj7dq1IywsjCpVqtCxY0eLpP18kh494LnnjFwM0Zk4Rp1LLhe+bf0tK99eyanrp6gxqwbf//69vdXK1JgzpjBZKXVCKfW5UqqS1TXSaDQZxtPTk+3btzNixAgWLFhArVq1CAsLs1j9Tk4wYQL8+SfMm2exaq3GWy+8RVivMKp4VKHTj53ovqY7dx/dtbdamRJz1il4AY2BKxhxkH5XSn1qbcU0Gk3GcHJyYsyYMWzZsoXbt29Tr149vvnmG4uFyHjjDWjYEPz84G4WeL56FvBk+7vbGfHyCBaFLaL27NqERVjOUWYXzFqnICIRIjIN6A2EAZ9ZVSuNRmMxvL29OXz4ME2bNrVo2k+l4Msv4fJl+OorCyhqA5wcnBjjPYYtXbdw++Ft6s2tx7R906weSyorYc46heeVUv5KqaPAN8BujEQ7Go0mi+Du7s66deuYMmUKGzZsoHr16uzYsSPD9darB2+/DZMmgZXXzlkU7zLeHO59mGZlmzFg4wB8lvlwNfKqvdXKFJgVJRW4AbwqIo1E5FsR+dfKemk0GgujlGLgwIHs3bsXFxcXvLy88Pf3JzqDI8XjxsHDh8bCtqyEe153fu7wM1ObT+XX079SPaA628/qCD4pOgWllCNwWkS+FpGLNtJJo9FYkZo1a3Lw4EE6d+7MqFGj8Pb25sKFC+mur1w56NMH5s4FG6V7sBhKKQa8OIA9PfbgmssV70Bv/IL9cnTazxSdgojEAIWVUs420kej0diA/Pnzs2jRIhYvXsyhQ4eoXr06a9asSXd9I0eCqysMG2ZBJW1IzeI1Oeh7kM5VOzN6x2i8Fnlx4Vb6HWVWxpzuo3PAb0qpkUqpj+KKtRXTaDTWp3PnzoSGhlKmTBnatGlDv3790pX2090dhg6FNWtg504rKGoD8ufOz6I2i1jcdjFhEWFUC6jG6hOr7a2WzTHHKVwE1pmOzZ+gaDSabED58uXZvXs3H330ETNmzEh32s+BA6FkSSM2UlaezNO5amdCfUMpW7BsfNrP+1H37a2WzTBnncKopEpGhCqlCiilVpoWxR1XSr2klCqklNqslDpl+iyYERkajcZ8nJ2d+eqrr1i/fn182s8hQ4ZQpUoVrl+/TnBwMFWqVEkxPLerq5FrYd8+WJXF4yiXL1ye3T1289GLHzEzZCb15taLT/u58OxC+ypnZcyZkhqslAp6smRQ7tfARhGpCFTDiLM0FNgqIuWBraZtjUZjQ1q1asXhw4d57rnn+PLLL/njjz8YNWoUrVu35sSJE3yeSoadrl2hcmVjbMFKgVpthrOjM181/4oNHTcQcTeCWrNrMTd0LovOZe8oP+Z0H/0fMMRURmIsXgtJr0Cl1FPAK8A8ABF5JCI3AR8gztqLgDbplaHRaNJPiRIlePToEQ4ODogIR44cITIykujoaFasWJHiuY6OMHGikYRn1iwbKWxlWpZvyeHeh6n/TH16/tzT3upYHZWelXxKqe0i0ihdApWqDswGjmG0Eg4CA4B/RKRAguNuiMh/upCUUr6AL4CHh0etZcuWpUcN7t69S758+dJ1bnZE2yMxOd0e165dY+zYsRw9epSoqKj4/cWKFePNN9+kSZMmFCpUKMlzRWDw4Gr8/XdelizZR758MbZS22osPLswyRZCN89uvFv6XdsrlEG8vLwOikjtJL8UkRQLUChBKQI0B/5M7bwU6qsNRAP1TNtfA58DN5847kZqddWqVUvSS3BwcLrPzY5oeyQmp9sjKChIXF1dBYgvjo6O4u7uHv93y5YtZenSpRIZGfmf80NCREBk+HA7KG9F7j68K/gjpaeWltsPbttbnXQDhEgyz1Vzuo8O8jinwh5gMNAjHc4pjnAgXETi8jatBGoCl5VSxQFMn3rVtEZjJ/r37x+fvS137tw4OzsTE2O88R8/fpxPPvmEo0eP0qFDBzw8POjRowfbtm0jNtbIi1yrFnTsCJMnQ3i43X6GxcnrnBeAczfPMXjTYDtrYx3MmX1URkTKmj7Li8irIrIrvQJFJAK4oJR6zrSrCUZX0lqgm2lfNyD9K2k0Gk2G2Lx5M76+vri7uzNs2DB69OiBu7s7P/zwAxUrVmTs2LGcPXuW4OBg2rVrx/Lly/Hy8qJMmTKMGDGCEydOMHYsxMYaUVSzE908uzGk/hDmhM5hw6kN9lbH8iTXhADqAMUSbHfFeFBPAwold545BaiO0fo4AqwGCgKFMWYdnTJ9pipDdx9ZDm2PxGh7PMYcW9y7d0++//57adGihTg4OAggderUEW/v6aLUFTlyxPp62org4GB5EPVAKs+sLMW/LC7XIq/ZW6U0Qzq7j2YBjwCUUq8AXwCBwC2MgeKMOKIwEaktIlVFpI2I3BCRayLSRIzWSBMRuZ4RGRqNxna4urrSoUMHfvnlF8LDw/nqq6+IiooiKOhDRIrTtOkbrFy5Ml2rpTMjuZ1ys7jtYq5GXuWDDR/YWx2LkpJTcEzwYP4fMFtEVonISKCc9VXTaDRZkeLFi/PRRx9x6NAhDh8+TKNGA/n33xDefvttihcvTq9evfjtt9+yfA6D6sWq49fIj2VHl/HD0R/srY7FSNEpKKWcTH83ARIuWHNK4niNRqNJRNWqVdm4cRLPPHOBcuV+5bXXWrNkyRIaNmxIuXLl8Pf35/Tp0/ZWM9180vAT6pWsR98Nfbl055K91bEIKTmFpcB2pdQa4D6wE0ApVQ6jC0mj0WhSJU8eGDfOkb/+epVWrRZz+fJlFi1aRJkyZRg9ejTlypWjQYMGBAQEcP161uo1dnJwYlGbRdyPus/7P7+f5Vs/kIJTEJGxGNNPFwIN5fGvdQA+tL5qGo0mu9CxI9SoAcOHQ65c+ejatStbtmzh/PnzfPHFF9y8eZM+ffpQvHhx3nrrLdasWRM/JTZht3+bswAAIABJREFU3CVzYjDZmueKPMcXTb9gw6kNzDs0z97qZJjU8insFZGfRORegn0nRSTU+qppNJrsgoODkbLz3DmYMePx/qeffjp+zcPBgwfp27cvu3btok2bNpQoUYI2bdrQqlUrTpw4QadOncyOwWRr+tXth1dpLwb9OogzN87YW50MYc7iNY1Go8kwTZpAixYwZgzcuJH4O6UUNWvWZMqUKYSHh7N+/XqaNm3K2rVrefDgAdHR0ezcudPsGEy2xkE5sLDNQhyUA++ueZdYibW3SulGOwWNRmMzJkyAmzdh/Pjkj8mVKxetWrVi2bJlHD9+nIoVK+Lg4BAfgylPnjzMnDnTRhqbTym3Unzd4mt2nNvB1L1T7a1OutFOQaPR2IyqVaFbN5g2zehKSo2LFy9y/vz5+PAZAA8ePGDx4sVW1DL9dKvWjTeee4PhW4dz7Moxe6uTLrRT0Gg0NmX0aFAKPv009WMTxmBycXEhV65cAKxdu5ZPP/2U6Ohoa6qaZpRSzG49m/y589P1p65ExUSlflImQzsFjUZjU555xkjduWQJHDqU8rEJYzAFBgby/vvvU6RIEVq0aMHYsWNp1KgR58xpctgQj3weBLwWwMFLBxm3c5y91Ukz6cqnkFmoXbu2hIQkzvcTFRVFeHh4qsvpHzx4QJ48eaypXpbCXHvkyZOHp59+Ov6NLbuybds2GjdubG81MgXWsMWtW/Dss1C9OmzebLQc0srSpUvp1asXjo6OzJ07l7feesuiOiaHufbo8lMXlv6+lL3v76V2iaRTF9gLpVSy+RSy3crk8PBw8ufPT+nSpVEpXGl37twhf/78NtQsc2OOPUSEa9euER4eTpkyZWykmSY74uYGn30GAwbApk3QvHna6+jQoQN169alQ4cOtGvXjl69ejFlyhRcXFwsr3A6mN5yOsFngun6U1cO+h7EJVfm0Cs1sl330YMHDyhcuHCKDkGTPpRSFC5cONsENdPYl969oWxZ+PhjiElncrZnn32WXbt2MWTIEGbNmkWdOnX4448/LKtoOimQpwDzfeZz/OpxPg0yYwAlk5DtnAKgHYIV0bbVWApnZ2Nq6pEjxvhC+utxZuLEiWzcuJErV67w/+2deVhV1frHP+sAiiZm5YRKoKaBCEIqzgpWWmiihdOl1HJIu1pWRl2tBEtN814pr+bUdeSnUl2za+a9pqCW8wAOaJOSqTkPac7w/v7YmyMgCsrhHDxnfZ5nP/vsddZZ6z3vA+fdew3ft1GjRkybNq1ESE60q92OQY0GMXHDRFZnrHa0OYXCKYOCRqO5O+jaFRo3NlYiXbxYtLbat29PWloarVq1YuDAgXTr1o0zZ87YxtAi8OHjH1Lrvlr0WdKHc5fPOdqcAtFBITER/PyMffh+fsa1DThy5Ag9evSgdu3a1KtXj8jISH788UebtG0LwsPDyZ6kj4yMLBH/PBrXQymYMMFI2fnRR0Vvr2rVqixfvpxx48bx5ZdfEhISwrp164recBG4p9Q9zOk8565J4enaQSExEQYMMHbRiBjnAQOKHBhEhC5duhAeHs4vv/xCeno6Y8aM4ejRozYy3LYsW7aMChUqONoMjYvSujV06mQMJZ04UfT2LBYLsbGxfPfdd1gsFlq3bs2YMWOsOaYdQYsHWxDbIpYZ22bw9Y9fO8yOwuDcQWHoUAgPz/coExkJffvChQu5P3PhglF+k88xdGiB3SYnJ+Ph4cHAgQOtZSEhIYSGhvLoo4/yyCOPEBQUxJIlRhrqjIwM/P396d27N8HBwURHR3PBtGvlypWEhoYSFBTECy+8wOXLlwHw8/Nj+PDhNGvWjEaNGrFt2zbat29P7dq1mTp1KmAsnevYsaPVhsGDBzN79uwb7PXz8+PkyZNkZGQQEBBA//79CQwMpF27dlws6jO9RlMIPvgAzp83dJFsRZMmTdi+fTvR0dGMGDGCdu3acfjwYdt1cJvEh8cTVDmIfv/px8kLJx1mR0E4d1AoCPMHttDlhWTXrl00bNjwhnJPT08WL17Mtm3bSE5O5vXXX7dOhv3www8MGDCAHTt2UL58eaZMmcKlS5fo06cPixYtYufOnVy7do1PPvnE2p6Pjw/r16+nVatW9OnTh88//5wNGzbw7rvv3rHtP/30E3/961/ZvXs3FSpU4IsvvrjjtjSawhIQAP36wZQpYMucO/feey8LFizg008/ZcOGDTRo0ICvv3bMnXpp99LM7TKXkxdOlugUnk63TyEXCTcXpbp47hxeQUH5C7D4+kJKis3NERGGDx/OmjVrsFgsHDp0yDqk5OPjQ4sWLQB49tln+fjjj3n88cepWbMmdevWBaB3795MnjyZoebTSqdOnQAICgri/PnzeHl54eXlhaen5x3PEdSsWZOQkBAAGjZsSEZGRlG+skZTaOLijFVII0bAwoW2a1cpxQsvvECzZs3o0aMHHTt25NVXX2Xs2LGULl3adh0VguwUnm8nv00X/y50r9/drv0XBtd+Uhg9GsqWzV1WtqxRXgQCAwPZunXrDeWJiYkcP36crVu3kpqaSpUqVaxr/vMu9VRKFbikLvsP2mKx5PrjtlgsXLt2DXd39xuExAoiZztubm4lTltG47x4e8OwYbBoEWzaZPv2AwIC2LhxI4MHD2bixIk0b96cn376yfYdFUDOFJ6HzzluOOtmuHZQiImB6dONJwOljPP06UZ5EWjbti2XL19mxowZ1rLNmzfz66+/UrlyZTw8PEhOTs6l2XLgwAHWr18PGNv3W7Zsib+/PxkZGfz8888AzJs3jzZt2hTaDl9fX9LT07l8+TJnz55l5cqVRfpeGk1xM2wYVK4Mb7xhrP2wNZ6enkyaNIkvv/ySjIwMHnnkEbsrruZK4flVyUvh6ZCgoJTKUErtVEqlKqW2mGX3K6VWKKV+Ms/32cWYmBjIyICsLONcxIAAxl3+4sWLWbFiBbVr1yYwMJC4uDgiIyPZsmULjRo1IjExEX9/f+tnAgICmDNnDsHBwZw6dYpBgwbh6enJrFmz6Nq1K0FBQVgsllyT1wXh4+NDt27dCA4OJiYmhtDQ0CJ/N42mOPHygvh4WLMGli4tvn6ioqJITU0lNDSUXr160atXL86ds98egocrPsy4x8bxzc/fMHPbTLv1WyhExO4HkAFUzFM2HnjLfP0WMK6gdho2bCh5SU9Pv6EsP/74449C1bMH+/fvl8DAQIfacDv+KKyP72aSk5MdbUKJwd6+uHJF5OGHRQICRK5eLd6+rl69KnFxcWKxWKROnTqyZcuWAj9jK39kZmVK2zltpdyYcrLv1D6btFlYgC1yk9/VkjR8FAXMMV/PATo70BaNRuMgPDyMJap79sCsWcXbl7u7OyNHjiQ5OZkLFy7QrFkzJk6caJchHYuyMCtqVolL4ekQ6Wyl1H7gNCDANBGZrpQ6IyIVctQ5LSI3DCEppQYAAwCqVKnScGGeZQr33nsvDz30UIE2ZGZm4ubmVrQv4kTcjj9+/vlnzp49W8wWOZbz589Trlw5R5tRInCEL0Tg5ZdDOXzYk/nzN1KmTPH/YJ49e5bx48ezbt06mjRpwltvvZXvpk5b+2P5keWM+2Ecg2oNoptPN5u1eysiIiJuKp3tqOGjaua5MpAGtAbO5KlzuqB2nGX4qCSgh49yo4ePruMoX6xbJwIio0bZr8+srCyZNGmSlC5dWry9vWXlypU31LG1P7KysiRqQZSUfq+07Dq6y6Zt3wxK2vCRiBw2z8eAxUAYcFQp5Q1gno85wjaNRlMyaNYMnnkGxo8HeynEKKUYPHgwGzdupHz58jz22GOMGDGiWJdmK6WY/pSZwvNLx6fwtHtQUErdo5Tyyn4NtAN2AV8Bvc1qvYEl9rZNo9GULGrVMpRn4uOvlyUnG4GiOGnQoAFbt27l+eefZ8yYMbRu3ZoFCxYQFBTEqVOnSE5OJigoiCNHjtikv8r3VGZax2ls+30bo9cWbZ9UkbnZI0RxHUAtjCGjNGA3MMIsfwBYCfxknu8vqC09fGQ79PBRbvTw0XUc6YtVq0Q8PUUsFpG9e43rihWNs71YsGCBlClTRgCxWCwSGhoqZcuWFXd3d3nppZds2tez/35W3OLdZPOhzTZtNy+UpOEjEdknIg3MI1BERpvlJ0XkURGpY55PFbct48cbdx05scVdSGEmodauXUtgYCAhISG3FJ3z8/PjRD7SkVOnTmXu3Ll3ZF9eoTyNpqQSEWGIFovAY49BdDQkJRnl9qJHjx74+PgAkJWVRVpaGhcuXODatWt89tlnNu1r0pOTqFquKr0W9+LiVceIUZakJal2p3Fj6NbtemBITjauGzcu/r4TExMZNmwYqampd5RTduDAgfTq1asYLNNoShZPPw1duhg5Fy5fBkcor6SkpBAeHo6Hh0cu6ZigoCBWr16dq6wo5EzhOWLVCJu0ebs4dVC4hXI2kZFliI+HatWMpOG+vsa5WjVj/LIIytlWsv+QoqOj8ff3JyYmBhFh5syZJCUlMWrUKGJiYgqUuP7www8JCwsjLCzMKnkRFxfHhAkTACNhzptvvklYWBh169Zl7dq1gKF19PzzzxMUFERoaCjJeR+LNJq7gORkY4fziy/CpUvQrh28+SZcteN87N69e9m0aRNXc3RqsVhYs2YN4eHh1KpVi7fffpsffvihyH21q92Olxq9RMKGBIek8HTqoFAY7rvPEOI6cMA432djcY3t27eTkJBAeno6+/bt4/vvv6dfv3506tSJDz/8kMRCJPQpX748mzZtYvDgwVaF1Lxcu3aNTZs2kZCQQLw5Kzd58mQAdu7cyYIFC+jdu3ehRPE0mpJC9tN7UhJMnQr/+Q94ehpDvC1bwr599rHj5Zdf5sqVK4AhGlmqVCmysrKoUKEC8+fPx9/fn7Fjx+Lv70+TJk2YPHlyvsO+hWX84+OpfX9th6TwdOqgkJBgKGDndyxbdpGUFBg50ljd8M47xnnkyJt/JiXllmrc+RIWFkaNGjWwWCyEhITckRR1z549reds0by8PP3000BuuevvvvuO5557DgB/f398fX1LVEpQjaYgNm/OPYfw5JOwbBk8+yz8+COEhtpWZvtmrFixggEDBlCpUiX+9re/0bdvXypVqkRSUhIxMTEsX76cgwcPMmHCBC5dusTgwYPx9vamc+fOfPHFF9bkWIUlO4XngbMHeO2/rxXTt8ofpw4KBZHzLmTUKOOcc47BFhRGirogieucstp5Jbbz9pOzD3HAbnWNxpbExt44qRwRAfPmQWoq1K8PPXsayRL//LP47KhatSqTJ0/m2LFjtGnThilTpnDs2DEichjn7e3N66+/TlpaGqmpqbzyyits3LiR6OhovL29GTRoEOvWrSv0/2Vzn+a80fwNZm6fadcUni4dFPLehUREGNebN9vXjoIkrhctWmQ9N2vWrNDttm7d2jo89eOPP3LgwAEefvhh2xmu0TgQX19YvdpIyjNrFjRqBDt2ONoqgwYNGjBhwgR+++03li9fTmRkJHPmzKFFixbUqVOH+Ph49hVi7MsRKTxdOijc7C4kNta+dhQkcX358mWaNGnCRx99xMSJEwvd7ksvvURmZiZBQUF0796d2bNn2z3TlEZTnLi7G3mdv/0Wzp6FsDCYPLl4cjHcCe7u7rRv35758+dz9OhRZs+eja+vL/Hx8dSuXZuWLVsyffp0Tp8+ne/nc6bwfGnZS/Yx+mYbGO6GQ29esx1681pu9Oa169wtvjh2TCQy0tBLiooSOXmyePqxhT8OHDggY8eOlYCAAAGkVKlSEh0dLV999ZVcuXLlhvqj14wW4pAFOxcUuW+RErZ5TaPRaIqDSpWMxDz/+IcxGd2ggbGUtSTi4+PDW2+9xe7du9myZQuDBg1i9erVdOrUiWrVqvHyyy+zefNm6/xDbItYmtZoyktfF38KTx0UNBqN06AUvPoqrF9vLF2NiDD2HWVmOtqy/FFK0bBhQxISEjh06BBLly6lbdu2TJ8+nbCwMOrVq8eYMWM4fPAwczrP4dK1S3T5oAtBQUEM+/cwm2swgQ4KGo3GCWnYELZtM7LrxsVB27bGjuiSjIeHBx06dGDRokUcOXKEGTNmULlyZUaMGIGvry8vRr9I873N2TR+E+l70vn763+nY8eO7N27l/fee89mduigoNFonBIvL5g71zi2bjWGk5bcJdrLFSpUoF+/fqxevZp9+/bx3nvvcejQIVbOXwnXICszC36jWDSYdFDQaDROzXPPwfbt4OcHnTvDkCGGXMbdQs2aNa0SGj3H9AQv843sITF3CP9ruM3600FBo9E4PXXqwLp1xnzDP/8JTZvC3r2Otur2UErRv2l/ymaWzVVeylKKikcr2qwfHRRM4lLibNZWTunsZcuWUadOHQ4cOHDT+ikpKaxbt85m/QM0b94cgIyMDOrXr2/TtjWau5HSpY2VSV9/DYcOGfMO//pXydnTUBhyajDhDqVKleLKlSt8/vnnNutDBwWT+NXxBVe6TVauXMmQIUNYvnw5Dz744E3r2TIoZJrLLGwdZDQaZyEyEtLSjKeFvn3hL38xNr7dDeTUYOr6dlerBlO26oEtcLdZSyWQocuHknokNd/3MjMzcXNzy1UWPju8wDZDqoaQ8ETBqnhr166lf//+LFu2jNq1awNw/PhxBg4caH1qSEhIoHr16kydOhU3Nzfmz5/PpEmTOHPmDO+//z5XrlzhgQceIDExkSpVqhAXF8cvv/zCoUOH+O2334iNjaV///6kpKQQHx+Pt7c3qamppKenU65cOc6fP1+gnRqNK1KtGvzvfzBuHLz7LmzcaAjrhYU52rJbk63BlK2ADDBlyhSb9uHUQaEgMs5k8OvZX63Xq381tMt97/XFr4LfHbd7+fJloqKiSElJwd/f31r+yiuv8Oqrr9KyZUsOHDhA+/bt2bNnDwMHDqRcuXIMGzYMgNOnT7NhwwaUUsycOZPx48fz97//HYAdO3awYcMG/vzzT0JDQ+nQoQMAmzZtYteuXdSsWfOO7dZoXAk3Nxg+3MiT0rMntGgBo0fDsGFgceExFKcOCre6oz937hxeXl7WaxWvkJG2GVz08PCgefPmfPrpp3z00UfW8m+//Zb09HTr9R9//MG5czdqpR88eJDu3bvz+++/c+XKlVw/9FFRUZQpU4YyZcoQERHBpk2bqFChAmFhYTogaDR3QPPmhuJq//5G8p6VK2HOHKha1dGWOQYXjofFh8ViISkpic2bNzNmzBhreVZWFuvXryc1NZXU1FQOHTqUKzBlM2TIEAYPHszOnTuZNm1aLintvNLZ2df33HNPMX0bjcb5ue8++OwzmDbNkMZo0MAYXnJFdFAwGdlmpE3bK1u2LEuXLiUxMZFPP/0UgHbt2vHPf/7TWic11Zjv8PLyyvXEcPbsWapXrw7AnDlzcrW7ZMkSLl26xMmTJ0lJSaGxPRJKazQugFIwYIAhnV+pkpGeNzYWshf7uAoOCwpKKTel1Hal1FLzuqZSaqNS6iel1CKlVCl72hMXHmfzNu+//36WL1/O+++/z5IlS/j444/ZsmULwcHB1KtXj6lTpwLw1FNPsXjxYkJCQli7di1xcXF07dqVVq1aUbFi7vXHYWFhdOjQgaZNm/LOO+9QrVo1m9ut0bgy9evDpk1GTugPP4RWreyX9rMk4Mg5hVeAPUB583ocMFFEFiqlpgJ9gU8cZVxRyLnqx8fHh/3791uv81s6VrduXXbkyQ4SFRWVb9t169Zl+vTpucrCw8MJDw/P1wY/Pz927dp1W/ZrNK5O2bJGTujHH4d+/SAgAN54w8jdkE1ysvFUYe/8K8WNQ54UlFI1gA7ATPNaAW2B7B0Yc4DOjrBNo9FosnnmGWMSuk4dY2XSk0/ChQtu1lS+zjh666gnhQQglusqHg8AZ0QkO4HxQaC6IwwrycTFxTnaBI3G5fD1NQJDnz6QmAgrVrSwZnxr3drR1tkeuwcFpVRH4JiIbFVKhWcX51M13/WhSqkBwACAKlWqkJKSkuv9e++9N99lnnnJzMwsVD1X4Xb8cenSpRv87mycP3/e6b9jYdG+MOjXD06frsuyZdWwWLJ44w0L48Zd5rHHjtKu3VFq1vzT0SbahpulZCuuAxiL8SSQARwBLgCJwAnA3azTDPhvQW3pdJy2Q6fjzM3dkoLSHmhfGKxaJVKxoshzz+2XihVF3n1X5KmnRNzdjRSgoaEi//iHyJEjjra0YChJ6ThF5G8iUkNE/IAewCoRiQGSgWizWm/gLlE+12g0zk72HEJSErzwQgZJSTBliqG6evgwfPyxsUP6tdegenVDX2nhQrh40dGW3z4laZ/Cm8BrSqmfMeYYPnWwPRqNRgMYq4ySkoz0nmCck5Ku72kYMsR4nZ5urEbatcuQzqha1RDdW70asrIc+x0Ki0ODgoikiEhH8/U+EQkTkYdEpKuIXLaHDTlznNoq36mbmxshISHUr1+frl27cuHCBSC3pLYtiIuLY8KECTZtU6PR3Ehs7PWAkE1ExI3LUQMCYMwYyMiAVavg6aeN4BEeDrVqwdtvww8/2MvqO6MkPSnYneTkZGuO05iYGJvlOy1Tpgypqans2rWLUqVKWTepaTQa18BiMYLGrFlw9KixaikgAMaOBX9/aNLESPZz4oSjLb0RpxbEGzp0qFVKIi+ZmZls27bNehefkpJClvl8N2PGDHbv3p3v50JCQkhIKFg6O5tWrVrdsDHt/PnzREVFcfr0aa5evcr7779v3aw2d+5cJkyYgFKK4OBg5s2bl6/kdosWLQBIS0ujbdu2uaS0RYTY2Fi++eYblFK8/fbbdO/evdA2azQa21G2rJGz4S9/gd9/hwULjLzRQ4YYcxKRkdCrF3TsaCQCcjROHRQKIjg4mL179/LHH39YA4LFYqFOnTo2af/atWt88803PPHEE7nKPT09Wbx4MeXLl+fEiRM0bdqUTp06kZ6ezujRo/n++++pWLEip06dAm4uuQ35S2lni+6lpaVx4sQJGjduTOvWrfH29rbJ99JoNHeGt7cxGf3aa7BjB8ybZzxFfPUVVKgA3bsbOaWbNze0mByBUweFW93Rnzt3ji1bttCxY0drQABwd3enTZs2RUpccfHiRUJCQgDjSaFv37653hcRhg8fzpo1a7BYLBw6dIijR4+yatUqoqOjrXpH999/P3Brye38pLS/++47evbsiZubG1WqVKFNmzZs3ryZTp063fF30mg0tiU42NBW+uADQ6573jzjmDYNateGZ581AoSZo8tuuPScQs58p2XKlLFZvtPsOYXU1FQmTZpEqVK5tf0SExM5fvw4W7duJTU1lSpVqnDp0iVE5AZpbLi15HZ+UtpyNyWd1WhcHDc3aNfOCAhHjhi5HPz8YNQoeOghaNnSCBSnT8P48cby2JwkJxvltsKlg0LOfKdz584tlnyn+XH27FkqV66Mh4cHycnJ/Pqrkf3t0UcfJSkpiZMnTwJYh49uJrkN+Utpt27dmkWLFpGZmcnx48dZs2YNYSU9z6BGo8HLy5hf+PZbOHDAeIo4fRoGDjSWty5dCp07X8/1UCwaTDfb1XY3HCV1R/M999xzy/Ljx49L06ZNpWHDhtK3b1/x9/eX/fv3i4jI7NmzJTAwUIKDg6V3797W+t26dZOgoCAJCAiQF198UURERo4cKf3795e2bdvKQw89JNOnTxcRkaysLBk2bJgEBgZK/fr1ZeHChQXarHc050bv4r2O9kVu7O2PrCyRrVtFXnlFpHJlY/e0UiJduhg7rFetuv02ucWOZof/sBflKKlB4W5EB4Xc6B/C62hf5MaR/rhyRWTpUpF69Yxf73feubN2bhUUXHr4SKPRaO4mPDyMJa7HjsE778Ann9w4x1BUdFDQaDSau4ScGkyjRhnnbt1sGxicMiiIXn1TbGjfajSO41YaTLbC6fYpeHp6cvLkSR544IF8l3dq7hwR4eTJk3h6ejraFI3GJckv9WdExI26TEXB6YJCjRo1OHjwIMePH79lvUuXLukftxwU1h+enp7UqFHDDhZpNBpH4HRBwcPDg5o1axZYLyUlhdDQUDtYdHeg/aHRaMBJ5xQ0Go1Gc2fooKDRaDQaKzooaDQajcaKupuXGCqljgO/3uHHKwIlMMWFw9D+yI32x3W0L3LjDP7wFZFK+b1xVweFoqCU2iIijRxtR0lB+yM32h/X0b7IjbP7Qw8faTQajcaKDgoajUajseLKQWG6ow0oYWh/5Eb74zraF7lxan+47JyCRqPRaG7ElZ8UNBqNRpMHHRQ0Go1GY8Ulg4JS6gml1A9KqZ+VUm852h57o5T6l1LqmFJqV46y+5VSK5RSP5nn+xxpo71QSvkopZKVUnuUUruVUq+Y5a7qD0+l1CalVJrpj3izvKZSaqPpj0VKqVKOttVeKKXclFLblVJLzWun9oXLBQWllBswGXgSqAf0VErVc6xVdmc28ESesreAlSJSB1hpXrsC14DXRSQAaAr81fx7cFV/XAbaikgDIAR4QinVFBgHTDT9cRro60Ab7c0rwJ4c107tC5cLCkAY8LOI7BORK8BCIMrBNtkVEVkDnMpTHAXMMV/PATrb1SgHISK/i8g28/U5jH/+6riuP0REzpuXHuYhQFvgc7PcZfyhlKoBdABmmtcKJ/eFKwaF6sBvOa4PmmWuThUR+R2MH0qgsoPtsTtKKT8gFNiIC/vDHC5JBY4BK4BfgDMics2s4kr/MwlALJBlXj+Ak/vCFYNCfunY9LpcF0cpVQ74AhgqIn842h5HIiKZIhIC1MB4sg7Ir5p9rbI/SqmOwDER2ZqzOJ+qTuULp0uyUwgOAj45rmsAhx1kS0niqFLKW0R+V0p5Y9wlugRKKQ+MgJAoIv82i13WH9mIyBmlVArGXEsFpZS7eYfsKv8zLYBOSqlIwBMoj/Hk4NS+cMUnhc1AHXMZnqJgAAADwklEQVQFQSmgB/CVg20qCXwF9DZf9waWONAWu2GOEX8K7BGRf+R4y1X9UUkpVcF8XQZ4DGOeJRmINqu5hD9E5G8iUkNE/DB+J1aJSAxO7guX3NFsRv4EwA34l4iMdrBJdkUptQAIx5AAPgqMBL4EkoAHgQNAVxHJOxntdCilWgJrgZ1cHzcejjGv4Ir+CMaYPHXDuGlMEpFRSqlaGIsy7ge2A8+KyGXHWWpflFLhwDAR6ejsvnDJoKDRaDSa/HHF4SONRqPR3AQdFDQajUZjRQcFjUaj0VjRQUGj0Wg0VnRQ0Gg0Go0VHRQ0To1S6gGlVKp5HFFKHcpxva6Y+gxVSmVr5fRRSh03VTZ/Ukr9VynV3Mb9dcxWM9VoiopekqpxGZRSccB5EZlQzP18BrwvImlKqT5AIxEZbL4XASwAIkRkzy2auZ3+FLANaCEiF2zRpsZ10U8KGpdFKXXePIcrpVYrpZKUUj8qpT5QSsWYeQV2KqVqm/UqKaW+UEptNo8W+bTpBQSLSFp+fYpIMkaO3wFm/f5mW2lm22WVUl5Kqf2m/AZKqfJKqQyllIdS6mWlVLpSaodSaqHZpgApQEfbe0njauigoNEYNMDQzQ8CngPqikgYhmTyELPORxg6+o2BZ8z38tII2JVPeU62Af7m63+LSGMzf8EeoK8p4Z2CIdkMhsTCFyJyFSOvQ6iIBAMDc7S5BWhVyO+q0dwUVxTE02jyY3O2VLZS6hfgf2b5TiDCfP0YUM8YrQGgvFLKy/wRz8YbOF5AXzmVNusrpd4HKgDlgP+a5TMxJJu/BJ4H+pvlO4BEpdSX5nvZHAOqFfQlNZqC0EFBozHIqV2TleM6i+v/JxagmYhcvEU7FzEUNW9FKNczec0GOueYfwgHEJHvlVJ+Sqk2gJuIZD99dABaA52Ad5RSgaZap6fZt0ZTJPTwkUZTeP4HDM6+UEqF5FNnD/DQzRowf+QHADPMIi/gd3P+ICZP9bkYk9KzzM9aAB9zXiKW608XAHUpeNhKoykQHRQ0msLzMtDInORNJ/eYPgAishe415xwzqa7uQT2RwwF1mdyrDx6B0ORdQWwN09zicB9GIEBDOXS+UqpnRjqnBNF5Iz5XgTwdZG/ocbl0UtSNRobo5R6FTgnIvlNRN9OO9FAlIg8V0C9KsD/icijRelPowE9p6DRFAefAF2L0oBSahLwJBBZiOoPAq8XpT+NJhv9pKDRaDQaK3pOQaPRaDRWdFDQaDQajRUdFDQajUZjRQcFjUaj0VjRQUGj0Wg0Vv4fY0CdWz8/kpkAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate the Plot (Accounting for percentages)\n",
    "#adjust values to be percentages\n",
    "#Convert survival rate into percentages\n",
    "percent_survival_df =cleaned_mouse_count_df.astype(float)\n",
    "percent_survival_df[\"Capomulin_Survival_Percent\"]= cleaned_mouse_count_df[\"Capomulin\"]/cleaned_mouse_count_df[\"Capomulin\"].iloc[0] * 100\n",
    "percent_survival_df[\"Infubinol_Survival_Percent\"]= cleaned_mouse_count_df[\"Infubinol\"]/cleaned_mouse_count_df[\"Infubinol\"].iloc[0] * 100\n",
    "percent_survival_df[\"Ketapril_Survival_Percent\"]= cleaned_mouse_count_df[\"Ketapril\"]/cleaned_mouse_count_df[\"Ketapril\"].iloc[0] * 100\n",
    "percent_survival_df[\"Placebo_Survival_Percent\"]= cleaned_mouse_count_df[\"Placebo\"]/cleaned_mouse_count_df[\"Placebo\"].iloc[0] * 100\n",
    "\n",
    "#Plot\n",
    "fig3, ax3 = plt.subplots()\n",
    "ax3.set(xlabel=\"Time (Days)\", ylabel= \"Survival Rate\", title=\"Survival During Treatment\")\n",
    "ax3.errorbar(percent_survival_df.index, percent_survival_df['Capomulin_Survival_Percent'], yerr = None, linestyle=\"-\", fmt='o', color='r', label=\"Capomulin\")\n",
    "ax3.errorbar(percent_survival_df.index, percent_survival_df['Infubinol_Survival_Percent'], yerr = None, linestyle=\"-\", fmt='x', color='b', label=\"Infubinol\")\n",
    "ax3.errorbar(percent_survival_df.index, percent_survival_df['Ketapril_Survival_Percent'], yerr = None, linestyle=\"-\", fmt='+', color='g', label=\"Ketapril\")\n",
    "ax3.errorbar(percent_survival_df.index, percent_survival_df['Placebo_Survival_Percent'], yerr = None, linestyle=\"-\", fmt='X', color='black', label=\"Placebo\")\n",
    "ax3.grid()\n",
    "ax3.legend(loc=\"best\")\n",
    "\n",
    "# Save the Figure\n",
    "path=os.path.join(os.path.expanduser(\"~\"), \"Desktop\", \"Survival During Treatment.png\")\n",
    "path\n",
    "fig.savefig(path)\n",
    "\n",
    "# Show the Figure\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary Bar Graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Capomulin     -4.000000\n",
       "Ceftamin     -92.307692\n",
       "Infubinol   -177.777778\n",
       "Ketapril    -127.272727\n",
       "Naftisol     -92.307692\n",
       "Placebo     -127.272727\n",
       "Propriva    -271.428571\n",
       "Ramicane     -25.000000\n",
       "Stelasyn    -136.363636\n",
       "Zoniferol    -78.571429\n",
       "dtype: float64"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the percent changes for each drug\n",
    "capomulin_percent=(cleaned_mouse_count_df[\"Capomulin\"].iloc[9]-cleaned_mouse_count_df[\"Capomulin\"].iloc[0])\n",
    "ceftamin_percent=(cleaned_mouse_count_df[\"Ceftamin\"].iloc[9]-cleaned_mouse_count_df[\"Ceftamin\"].iloc[0])/cleaned_mouse_count_df[\"Ceftamin\"].iloc[9]*100\n",
    "infubinol_percent=(cleaned_mouse_count_df[\"Infubinol\"].iloc[9]-cleaned_mouse_count_df[\"Infubinol\"].iloc[0])/cleaned_mouse_count_df[\"Infubinol\"].iloc[9]*100\n",
    "ketapril_percent=(cleaned_mouse_count_df[\"Ketapril\"].iloc[9]-cleaned_mouse_count_df[\"Ketapril\"].iloc[0])/cleaned_mouse_count_df[\"Ketapril\"].iloc[9]*100\n",
    "naftisol_percent=(cleaned_mouse_count_df[\"Naftisol\"].iloc[9]-cleaned_mouse_count_df[\"Naftisol\"].iloc[0])/cleaned_mouse_count_df[\"Naftisol\"].iloc[9]*100\n",
    "placebo_percent=(cleaned_mouse_count_df[\"Placebo\"].iloc[9]-cleaned_mouse_count_df[\"Placebo\"].iloc[0])/cleaned_mouse_count_df[\"Placebo\"].iloc[9]*100\n",
    "propriva_percent=(cleaned_mouse_count_df[\"Propriva\"].iloc[9]-cleaned_mouse_count_df[\"Propriva\"].iloc[0])/cleaned_mouse_count_df[\"Propriva\"].iloc[9]*100\n",
    "ramicane_percent=(cleaned_mouse_count_df[\"Ramicane\"].iloc[9]-cleaned_mouse_count_df[\"Ramicane\"].iloc[0])/cleaned_mouse_count_df[\"Ramicane\"].iloc[9]*100\n",
    "stelasyn_percent=(cleaned_mouse_count_df[\"Stelasyn\"].iloc[9]-cleaned_mouse_count_df[\"Stelasyn\"].iloc[0])/cleaned_mouse_count_df[\"Stelasyn\"].iloc[9]*100\n",
    "zoniferol_percent=(cleaned_mouse_count_df[\"Zoniferol\"].iloc[9]-cleaned_mouse_count_df[\"Zoniferol\"].iloc[0])/cleaned_mouse_count_df[\"Zoniferol\"].iloc[9]*100\n",
    "\n",
    "# Store percentages as tuple\n",
    "percentages_tuple={'Capomulin': capomulin_percent, 'Ceftamin': ceftamin_percent, 'Infubinol': infubinol_percent, 'Ketapril': ketapril_percent,\n",
    "          'Naftisol': naftisol_percent, 'Placebo': placebo_percent, 'Propriva': propriva_percent, 'Ramicane': ramicane_percent,\n",
    "          'Stelasyn': stelasyn_percent, 'Zoniferol': zoniferol_percent}\n",
    "# Display the data to confirm\n",
    "tumorvol_percent_change=pd.Series(percentages_tuple)\n",
    "tumorvol_percent_change\n",
    "\n",
    "# drug_percent_change = tumorvol_percent_change.keys()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Capomulin   -16.000000\n",
       "Ceftamin    -48.000000\n",
       "Infubinol   -64.000000\n",
       "Ketapril    -56.000000\n",
       "Naftisol    -48.000000\n",
       "Placebo     -56.000000\n",
       "Propriva    -73.076923\n",
       "Ramicane    -20.000000\n",
       "Stelasyn    -57.692308\n",
       "Zoniferol   -44.000000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the percent changes for each drug\n",
    "Capomulin_percent=(cleaned_mouse_count_df[\"Capomulin\"].iloc[9]-cleaned_mouse_count_df[\"Capomulin\"].iloc[0])/cleaned_mouse_count_df[\"Capomulin\"].iloc[0]*100\n",
    "Ceftamin_percent=(cleaned_mouse_count_df[\"Ceftamin\"].iloc[9]-cleaned_mouse_count_df[\"Ceftamin\"].iloc[0])/cleaned_mouse_count_df[\"Ceftamin\"].iloc[0]*100\n",
    "Infubinol_percent=(cleaned_mouse_count_df[\"Infubinol\"].iloc[9]-cleaned_mouse_count_df[\"Infubinol\"].iloc[0])/cleaned_mouse_count_df[\"Infubinol\"].iloc[0]*100\n",
    "Ketapril_percent=(cleaned_mouse_count_df[\"Ketapril\"].iloc[9]-cleaned_mouse_count_df[\"Ketapril\"].iloc[0])/cleaned_mouse_count_df[\"Ketapril\"].iloc[0]*100\n",
    "Naftisol_percent=(cleaned_mouse_count_df[\"Naftisol\"].iloc[9]-cleaned_mouse_count_df[\"Naftisol\"].iloc[0])/cleaned_mouse_count_df[\"Naftisol\"].iloc[0]*100\n",
    "Placebo_percent=(cleaned_mouse_count_df[\"Placebo\"].iloc[9]-cleaned_mouse_count_df[\"Placebo\"].iloc[0])/cleaned_mouse_count_df[\"Placebo\"].iloc[0]*100\n",
    "Propriva_percent=(cleaned_mouse_count_df[\"Propriva\"].iloc[9]-cleaned_mouse_count_df[\"Propriva\"].iloc[0])/cleaned_mouse_count_df[\"Propriva\"].iloc[0]*100\n",
    "Ramicane_percent=(cleaned_mouse_count_df[\"Ramicane\"].iloc[9]-cleaned_mouse_count_df[\"Ramicane\"].iloc[0])/cleaned_mouse_count_df[\"Ramicane\"].iloc[0]*100\n",
    "Stelasyn_percent=(cleaned_mouse_count_df[\"Stelasyn\"].iloc[9]-cleaned_mouse_count_df[\"Stelasyn\"].iloc[0])/cleaned_mouse_count_df[\"Stelasyn\"].iloc[0]*100\n",
    "Zoniferol_percent=(cleaned_mouse_count_df[\"Zoniferol\"].iloc[9]-cleaned_mouse_count_df[\"Zoniferol\"].iloc[0])/cleaned_mouse_count_df[\"Zoniferol\"].iloc[0]*100\n",
    "\n",
    "# Store all Relevant Percent Changes into a Tuple\n",
    "pct_tuple={'Capomulin': Capomulin_percent, 'Ceftamin': Ceftamin_percent, 'Infubinol': Infubinol_percent, 'Ketapril': Ketapril_percent,\n",
    "          'Naftisol': Naftisol_percent, 'Placebo': Placebo_percent, 'Propriva': Propriva_percent, 'Ramicane': Ramicane_percent,\n",
    "          'Stelasyn': Stelasyn_percent, 'Zoniferol': Zoniferol_percent}\n",
    "# Display the data to confirm\n",
    "pctchg_tumorvol=pd.Series(pct_tuple)\n",
    "pctchg_tumorvol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-92.3076923076923"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the percent changes for each drug\n",
    "Capomulin_percent=(cleaned_mouse_count_df[\"Capomulin\"].iloc[9]-cleaned_mouse_count_df[\"Capomulin\"].iloc[0])/cleaned_mouse_count_df[\"Capomulin\"].iloc[9]*100\n",
    "Ceftamin_percent=(cleaned_mouse_count_df[\"Ceftamin\"].iloc[9]-cleaned_mouse_count_df[\"Ceftamin\"].iloc[0])/cleaned_mouse_count_df[\"Ceftamin\"].iloc[9]*100\n",
    "Infubinol_percent=(reshape_tumor_response_df[\"Infubinol\"].iloc[9]-reshape_tumor_response_df[\"Infubinol\"].iloc[0])/reshape_tumor_response_df[\"Infubinol\"].iloc[9]*100\n",
    "Ketapril_percent=(reshape_tumor_response_df[\"Ketapril\"].iloc[9]-reshape_tumor_response_df[\"Ketapril\"].iloc[0])/reshape_tumor_response_df[\"Ketapril\"].iloc[9]*100\n",
    "Naftisol_percent=(reshape_tumor_response_df[\"Naftisol\"].iloc[9]-reshape_tumor_response_df[\"Naftisol\"].iloc[0])/reshape_tumor_response_df[\"Naftisol\"].iloc[9]*100\n",
    "Placebo_percent=(reshape_tumor_response_df[\"Placebo\"].iloc[9]-reshape_tumor_response_df[\"Placebo\"].iloc[0])/reshape_tumor_response_df[\"Placebo\"].iloc[9]*100\n",
    "Propriva_percent=(reshape_tumor_response_df[\"Propriva\"].iloc[9]-reshape_tumor_response_df[\"Propriva\"].iloc[0])/reshape_tumor_response_df[\"Propriva\"].iloc[9]*100\n",
    "Ramicane_percent=(reshape_tumor_response_df[\"Ramicane\"].iloc[9]-reshape_tumor_response_df[\"Ramicane\"].iloc[0])/reshape_tumor_response_df[\"Ramicane\"].iloc[9]*100\n",
    "Stelasyn_percent=(reshape_tumor_response_df[\"Stelasyn\"].iloc[9]-reshape_tumor_response_df[\"Stelasyn\"].iloc[0])/reshape_tumor_response_df[\"Stelasyn\"].iloc[9]*100\n",
    "Zoniferol_percent=(reshape_tumor_response_df[\"Zoniferol\"].iloc[9]-reshape_tumor_response_df[\"Zoniferol\"].iloc[0])/reshape_tumor_response_df[\"Zoniferol\"].iloc[9]*100\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig4, ax4 = plt.subplots()\n",
    "x_axis = np.arange(0, len(drug_percent_change))\n",
    "# Orient widths. Add labels, tick marks, etc. \n",
    "ticks=[]\n",
    "for x in x_axis:\n",
    "    ticks.append(x + 0.5)\n",
    "plt.xticks(ticks, drug_percent_change)\n",
    "# Splice data between passing and failing drugs\n",
    "colors=[]\n",
    "for value in tumorvol_percent_change:\n",
    "     if value>=0:\n",
    "            colors.append('g')\n",
    "     else: \n",
    "            colors.append('r')\n",
    "# Use functions to label the percentages of changes       \n",
    "pct_chg_bar = ax4.bar(x_axis, pctchg_tumorvol, color=colors, align=\"edge\")\n",
    "plt.xticks(rotation=45)\n",
    "ax4.set(xlabel=\"Drugs\", ylabel=\"Percentage Tumor Volume Change\", title=\"Tumor Volume Change over 45 Days\")\n",
    "# Call functions to implement the function calls\n",
    "for i, v in enumerate(pctchg_tumorvol):\n",
    "    ax4.text(i+0.5, \n",
    "              v/pctchg_tumorvol[i]+10, \n",
    "              pctchg_tumorvol[i],\n",
    "              fontsize=10, \n",
    "              color='white')\n",
    "\n",
    "# Save the Figure\n",
    "path=os.path.join(os.path.expanduser(\"~\"), \"Desktop\", \"Tumor Vol Chg over 45 Days\")\n",
    "path\n",
    "fig3.savefig(path)\n",
    "# Show the Figure\n",
    "fig3.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Metastatic Spread During Treatment](../Images/change.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
